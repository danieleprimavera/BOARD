
EsameElettronica.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ec0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003048  08003048  00004048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003088  08003088  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003088  08003088  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003088  08003088  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003088  08003088  00004088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800308c  0800308c  0000408c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003090  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  0800309c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  0800309c  000050cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d69a  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e16  00000000  00000000  000126d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  000144f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b91  00000000  00000000  000153c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002587f  00000000  00000000  00015f59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001159a  00000000  00000000  0003b7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eaff9  00000000  00000000  0004cd72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00137d6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e9c  00000000  00000000  00137db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0013bc4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003030 	.word	0x08003030

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003030 	.word	0x08003030

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fa75 	bl	80006ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f808 	bl	80001e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8fc 	bl	80003d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001d8:	f000 f84a 	bl	8000270 <MX_I2C1_Init>
  MX_TIM2_Init();
 80001dc:	f000 f888 	bl	80002f0 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e0:	bf00      	nop
 80001e2:	e7fd      	b.n	80001e0 <main+0x18>

080001e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b096      	sub	sp, #88	@ 0x58
 80001e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ea:	f107 0314 	add.w	r3, r7, #20
 80001ee:	2244      	movs	r2, #68	@ 0x44
 80001f0:	2100      	movs	r1, #0
 80001f2:	4618      	mov	r0, r3
 80001f4:	f002 fef0 	bl	8002fd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f8:	463b      	mov	r3, r7
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
 80001fe:	605a      	str	r2, [r3, #4]
 8000200:	609a      	str	r2, [r3, #8]
 8000202:	60da      	str	r2, [r3, #12]
 8000204:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000206:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800020a:	f000 fe9b 	bl	8000f44 <HAL_PWREx_ControlVoltageScaling>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d001      	beq.n	8000218 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000214:	f000 f90c 	bl	8000430 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000218:	2310      	movs	r3, #16
 800021a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800021c:	2301      	movs	r3, #1
 800021e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000220:	2300      	movs	r3, #0
 8000222:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000224:	2360      	movs	r3, #96	@ 0x60
 8000226:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000228:	2300      	movs	r3, #0
 800022a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800022c:	f107 0314 	add.w	r3, r7, #20
 8000230:	4618      	mov	r0, r3
 8000232:	f000 fedd 	bl	8000ff0 <HAL_RCC_OscConfig>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d001      	beq.n	8000240 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800023c:	f000 f8f8 	bl	8000430 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000240:	230f      	movs	r3, #15
 8000242:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000244:	2300      	movs	r3, #0
 8000246:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000248:	2300      	movs	r3, #0
 800024a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800024c:	2300      	movs	r3, #0
 800024e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000254:	463b      	mov	r3, r7
 8000256:	2100      	movs	r1, #0
 8000258:	4618      	mov	r0, r3
 800025a:	f001 faa5 	bl	80017a8 <HAL_RCC_ClockConfig>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000264:	f000 f8e4 	bl	8000430 <Error_Handler>
  }
}
 8000268:	bf00      	nop
 800026a:	3758      	adds	r7, #88	@ 0x58
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}

08000270 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000274:	4b1b      	ldr	r3, [pc, #108]	@ (80002e4 <MX_I2C1_Init+0x74>)
 8000276:	4a1c      	ldr	r2, [pc, #112]	@ (80002e8 <MX_I2C1_Init+0x78>)
 8000278:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100D14;
 800027a:	4b1a      	ldr	r3, [pc, #104]	@ (80002e4 <MX_I2C1_Init+0x74>)
 800027c:	4a1b      	ldr	r2, [pc, #108]	@ (80002ec <MX_I2C1_Init+0x7c>)
 800027e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000280:	4b18      	ldr	r3, [pc, #96]	@ (80002e4 <MX_I2C1_Init+0x74>)
 8000282:	2200      	movs	r2, #0
 8000284:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000286:	4b17      	ldr	r3, [pc, #92]	@ (80002e4 <MX_I2C1_Init+0x74>)
 8000288:	2201      	movs	r2, #1
 800028a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800028c:	4b15      	ldr	r3, [pc, #84]	@ (80002e4 <MX_I2C1_Init+0x74>)
 800028e:	2200      	movs	r2, #0
 8000290:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000292:	4b14      	ldr	r3, [pc, #80]	@ (80002e4 <MX_I2C1_Init+0x74>)
 8000294:	2200      	movs	r2, #0
 8000296:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000298:	4b12      	ldr	r3, [pc, #72]	@ (80002e4 <MX_I2C1_Init+0x74>)
 800029a:	2200      	movs	r2, #0
 800029c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800029e:	4b11      	ldr	r3, [pc, #68]	@ (80002e4 <MX_I2C1_Init+0x74>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002a4:	4b0f      	ldr	r3, [pc, #60]	@ (80002e4 <MX_I2C1_Init+0x74>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002aa:	480e      	ldr	r0, [pc, #56]	@ (80002e4 <MX_I2C1_Init+0x74>)
 80002ac:	f000 fd0a 	bl	8000cc4 <HAL_I2C_Init>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80002b6:	f000 f8bb 	bl	8000430 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80002ba:	2100      	movs	r1, #0
 80002bc:	4809      	ldr	r0, [pc, #36]	@ (80002e4 <MX_I2C1_Init+0x74>)
 80002be:	f000 fd9c 	bl	8000dfa <HAL_I2CEx_ConfigAnalogFilter>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80002c8:	f000 f8b2 	bl	8000430 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80002cc:	2100      	movs	r1, #0
 80002ce:	4805      	ldr	r0, [pc, #20]	@ (80002e4 <MX_I2C1_Init+0x74>)
 80002d0:	f000 fdde 	bl	8000e90 <HAL_I2CEx_ConfigDigitalFilter>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80002da:	f000 f8a9 	bl	8000430 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002de:	bf00      	nop
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	20000028 	.word	0x20000028
 80002e8:	40005400 	.word	0x40005400
 80002ec:	00100d14 	.word	0x00100d14

080002f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b08a      	sub	sp, #40	@ 0x28
 80002f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002f6:	f107 031c 	add.w	r3, r7, #28
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000302:	463b      	mov	r3, r7
 8000304:	2200      	movs	r2, #0
 8000306:	601a      	str	r2, [r3, #0]
 8000308:	605a      	str	r2, [r3, #4]
 800030a:	609a      	str	r2, [r3, #8]
 800030c:	60da      	str	r2, [r3, #12]
 800030e:	611a      	str	r2, [r3, #16]
 8000310:	615a      	str	r2, [r3, #20]
 8000312:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000314:	4b2d      	ldr	r3, [pc, #180]	@ (80003cc <MX_TIM2_Init+0xdc>)
 8000316:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800031a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800031c:	4b2b      	ldr	r3, [pc, #172]	@ (80003cc <MX_TIM2_Init+0xdc>)
 800031e:	2200      	movs	r2, #0
 8000320:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000322:	4b2a      	ldr	r3, [pc, #168]	@ (80003cc <MX_TIM2_Init+0xdc>)
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000328:	4b28      	ldr	r3, [pc, #160]	@ (80003cc <MX_TIM2_Init+0xdc>)
 800032a:	f04f 32ff 	mov.w	r2, #4294967295
 800032e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000330:	4b26      	ldr	r3, [pc, #152]	@ (80003cc <MX_TIM2_Init+0xdc>)
 8000332:	2200      	movs	r2, #0
 8000334:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000336:	4b25      	ldr	r3, [pc, #148]	@ (80003cc <MX_TIM2_Init+0xdc>)
 8000338:	2200      	movs	r2, #0
 800033a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800033c:	4823      	ldr	r0, [pc, #140]	@ (80003cc <MX_TIM2_Init+0xdc>)
 800033e:	f002 f8db 	bl	80024f8 <HAL_TIM_PWM_Init>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000348:	f000 f872 	bl	8000430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800034c:	2300      	movs	r3, #0
 800034e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000350:	2300      	movs	r3, #0
 8000352:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000354:	f107 031c 	add.w	r3, r7, #28
 8000358:	4619      	mov	r1, r3
 800035a:	481c      	ldr	r0, [pc, #112]	@ (80003cc <MX_TIM2_Init+0xdc>)
 800035c:	f002 fdb4 	bl	8002ec8 <HAL_TIMEx_MasterConfigSynchronization>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000366:	f000 f863 	bl	8000430 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800036a:	2360      	movs	r3, #96	@ 0x60
 800036c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800036e:	2300      	movs	r3, #0
 8000370:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000372:	2300      	movs	r3, #0
 8000374:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000376:	2300      	movs	r3, #0
 8000378:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800037a:	463b      	mov	r3, r7
 800037c:	2200      	movs	r2, #0
 800037e:	4619      	mov	r1, r3
 8000380:	4812      	ldr	r0, [pc, #72]	@ (80003cc <MX_TIM2_Init+0xdc>)
 8000382:	f002 f911 	bl	80025a8 <HAL_TIM_PWM_ConfigChannel>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800038c:	f000 f850 	bl	8000430 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000390:	463b      	mov	r3, r7
 8000392:	2204      	movs	r2, #4
 8000394:	4619      	mov	r1, r3
 8000396:	480d      	ldr	r0, [pc, #52]	@ (80003cc <MX_TIM2_Init+0xdc>)
 8000398:	f002 f906 	bl	80025a8 <HAL_TIM_PWM_ConfigChannel>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80003a2:	f000 f845 	bl	8000430 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80003a6:	463b      	mov	r3, r7
 80003a8:	2208      	movs	r2, #8
 80003aa:	4619      	mov	r1, r3
 80003ac:	4807      	ldr	r0, [pc, #28]	@ (80003cc <MX_TIM2_Init+0xdc>)
 80003ae:	f002 f8fb 	bl	80025a8 <HAL_TIM_PWM_ConfigChannel>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 80003b8:	f000 f83a 	bl	8000430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003bc:	4803      	ldr	r0, [pc, #12]	@ (80003cc <MX_TIM2_Init+0xdc>)
 80003be:	f000 f8dd 	bl	800057c <HAL_TIM_MspPostInit>

}
 80003c2:	bf00      	nop
 80003c4:	3728      	adds	r7, #40	@ 0x28
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	2000007c 	.word	0x2000007c

080003d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003d6:	4b15      	ldr	r3, [pc, #84]	@ (800042c <MX_GPIO_Init+0x5c>)
 80003d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003da:	4a14      	ldr	r2, [pc, #80]	@ (800042c <MX_GPIO_Init+0x5c>)
 80003dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003e2:	4b12      	ldr	r3, [pc, #72]	@ (800042c <MX_GPIO_Init+0x5c>)
 80003e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ee:	4b0f      	ldr	r3, [pc, #60]	@ (800042c <MX_GPIO_Init+0x5c>)
 80003f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003f2:	4a0e      	ldr	r2, [pc, #56]	@ (800042c <MX_GPIO_Init+0x5c>)
 80003f4:	f043 0301 	orr.w	r3, r3, #1
 80003f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003fa:	4b0c      	ldr	r3, [pc, #48]	@ (800042c <MX_GPIO_Init+0x5c>)
 80003fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003fe:	f003 0301 	and.w	r3, r3, #1
 8000402:	60bb      	str	r3, [r7, #8]
 8000404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000406:	4b09      	ldr	r3, [pc, #36]	@ (800042c <MX_GPIO_Init+0x5c>)
 8000408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800040a:	4a08      	ldr	r2, [pc, #32]	@ (800042c <MX_GPIO_Init+0x5c>)
 800040c:	f043 0302 	orr.w	r3, r3, #2
 8000410:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000412:	4b06      	ldr	r3, [pc, #24]	@ (800042c <MX_GPIO_Init+0x5c>)
 8000414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000416:	f003 0302 	and.w	r3, r3, #2
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800041e:	bf00      	nop
 8000420:	3714      	adds	r7, #20
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	40021000 	.word	0x40021000

08000430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000434:	b672      	cpsid	i
}
 8000436:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000438:	bf00      	nop
 800043a:	e7fd      	b.n	8000438 <Error_Handler+0x8>

0800043c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000442:	4b0f      	ldr	r3, [pc, #60]	@ (8000480 <HAL_MspInit+0x44>)
 8000444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000446:	4a0e      	ldr	r2, [pc, #56]	@ (8000480 <HAL_MspInit+0x44>)
 8000448:	f043 0301 	orr.w	r3, r3, #1
 800044c:	6613      	str	r3, [r2, #96]	@ 0x60
 800044e:	4b0c      	ldr	r3, [pc, #48]	@ (8000480 <HAL_MspInit+0x44>)
 8000450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000452:	f003 0301 	and.w	r3, r3, #1
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800045a:	4b09      	ldr	r3, [pc, #36]	@ (8000480 <HAL_MspInit+0x44>)
 800045c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800045e:	4a08      	ldr	r2, [pc, #32]	@ (8000480 <HAL_MspInit+0x44>)
 8000460:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000464:	6593      	str	r3, [r2, #88]	@ 0x58
 8000466:	4b06      	ldr	r3, [pc, #24]	@ (8000480 <HAL_MspInit+0x44>)
 8000468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800046a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800046e:	603b      	str	r3, [r7, #0]
 8000470:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000472:	bf00      	nop
 8000474:	370c      	adds	r7, #12
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	40021000 	.word	0x40021000

08000484 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b0ac      	sub	sp, #176	@ 0xb0
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
 8000494:	605a      	str	r2, [r3, #4]
 8000496:	609a      	str	r2, [r3, #8]
 8000498:	60da      	str	r2, [r3, #12]
 800049a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800049c:	f107 0314 	add.w	r3, r7, #20
 80004a0:	2288      	movs	r2, #136	@ 0x88
 80004a2:	2100      	movs	r1, #0
 80004a4:	4618      	mov	r0, r3
 80004a6:	f002 fd97 	bl	8002fd8 <memset>
  if(hi2c->Instance==I2C1)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a21      	ldr	r2, [pc, #132]	@ (8000534 <HAL_I2C_MspInit+0xb0>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d13b      	bne.n	800052c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80004b4:	2340      	movs	r3, #64	@ 0x40
 80004b6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80004b8:	2300      	movs	r3, #0
 80004ba:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004bc:	f107 0314 	add.w	r3, r7, #20
 80004c0:	4618      	mov	r0, r3
 80004c2:	f001 fb5d 	bl	8001b80 <HAL_RCCEx_PeriphCLKConfig>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80004cc:	f7ff ffb0 	bl	8000430 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d0:	4b19      	ldr	r3, [pc, #100]	@ (8000538 <HAL_I2C_MspInit+0xb4>)
 80004d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004d4:	4a18      	ldr	r2, [pc, #96]	@ (8000538 <HAL_I2C_MspInit+0xb4>)
 80004d6:	f043 0302 	orr.w	r3, r3, #2
 80004da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004dc:	4b16      	ldr	r3, [pc, #88]	@ (8000538 <HAL_I2C_MspInit+0xb4>)
 80004de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004e0:	f003 0302 	and.w	r3, r3, #2
 80004e4:	613b      	str	r3, [r7, #16]
 80004e6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80004e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80004ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004f0:	2312      	movs	r3, #18
 80004f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004fc:	2303      	movs	r3, #3
 80004fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000502:	2304      	movs	r3, #4
 8000504:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000508:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800050c:	4619      	mov	r1, r3
 800050e:	480b      	ldr	r0, [pc, #44]	@ (800053c <HAL_I2C_MspInit+0xb8>)
 8000510:	f000 fa2e 	bl	8000970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000514:	4b08      	ldr	r3, [pc, #32]	@ (8000538 <HAL_I2C_MspInit+0xb4>)
 8000516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000518:	4a07      	ldr	r2, [pc, #28]	@ (8000538 <HAL_I2C_MspInit+0xb4>)
 800051a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800051e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000520:	4b05      	ldr	r3, [pc, #20]	@ (8000538 <HAL_I2C_MspInit+0xb4>)
 8000522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000524:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800052c:	bf00      	nop
 800052e:	37b0      	adds	r7, #176	@ 0xb0
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40005400 	.word	0x40005400
 8000538:	40021000 	.word	0x40021000
 800053c:	48000400 	.word	0x48000400

08000540 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000550:	d10b      	bne.n	800056a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000552:	4b09      	ldr	r3, [pc, #36]	@ (8000578 <HAL_TIM_PWM_MspInit+0x38>)
 8000554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000556:	4a08      	ldr	r2, [pc, #32]	@ (8000578 <HAL_TIM_PWM_MspInit+0x38>)
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	6593      	str	r3, [r2, #88]	@ 0x58
 800055e:	4b06      	ldr	r3, [pc, #24]	@ (8000578 <HAL_TIM_PWM_MspInit+0x38>)
 8000560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800056a:	bf00      	nop
 800056c:	3714      	adds	r7, #20
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	40021000 	.word	0x40021000

0800057c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800059c:	d11c      	bne.n	80005d8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059e:	4b10      	ldr	r3, [pc, #64]	@ (80005e0 <HAL_TIM_MspPostInit+0x64>)
 80005a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005a2:	4a0f      	ldr	r2, [pc, #60]	@ (80005e0 <HAL_TIM_MspPostInit+0x64>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005aa:	4b0d      	ldr	r3, [pc, #52]	@ (80005e0 <HAL_TIM_MspPostInit+0x64>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80005b6:	2307      	movs	r3, #7
 80005b8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ba:	2302      	movs	r3, #2
 80005bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80005c6:	2301      	movs	r3, #1
 80005c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	4619      	mov	r1, r3
 80005d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d4:	f000 f9cc 	bl	8000970 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80005d8:	bf00      	nop
 80005da:	3720      	adds	r7, #32
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40021000 	.word	0x40021000

080005e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <NMI_Handler+0x4>

080005ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <HardFault_Handler+0x4>

080005f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <MemManage_Handler+0x4>

080005fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <BusFault_Handler+0x4>

08000604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <UsageFault_Handler+0x4>

0800060c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr

08000636 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800063a:	f000 f893 	bl	8000764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000648:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <SystemInit+0x20>)
 800064a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800064e:	4a05      	ldr	r2, [pc, #20]	@ (8000664 <SystemInit+0x20>)
 8000650:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000654:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000668:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800066c:	f7ff ffea 	bl	8000644 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000670:	480c      	ldr	r0, [pc, #48]	@ (80006a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000672:	490d      	ldr	r1, [pc, #52]	@ (80006a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000674:	4a0d      	ldr	r2, [pc, #52]	@ (80006ac <LoopForever+0xe>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000678:	e002      	b.n	8000680 <LoopCopyDataInit>

0800067a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800067c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067e:	3304      	adds	r3, #4

08000680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000684:	d3f9      	bcc.n	800067a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000686:	4a0a      	ldr	r2, [pc, #40]	@ (80006b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000688:	4c0a      	ldr	r4, [pc, #40]	@ (80006b4 <LoopForever+0x16>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800068c:	e001      	b.n	8000692 <LoopFillZerobss>

0800068e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000690:	3204      	adds	r2, #4

08000692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000694:	d3fb      	bcc.n	800068e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000696:	f002 fca7 	bl	8002fe8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800069a:	f7ff fd95 	bl	80001c8 <main>

0800069e <LoopForever>:

LoopForever:
    b LoopForever
 800069e:	e7fe      	b.n	800069e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80006a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80006a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006ac:	08003090 	.word	0x08003090
  ldr r2, =_sbss
 80006b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006b4:	200000cc 	.word	0x200000cc

080006b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006b8:	e7fe      	b.n	80006b8 <ADC1_2_IRQHandler>

080006ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b082      	sub	sp, #8
 80006be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006c0:	2300      	movs	r3, #0
 80006c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006c4:	2003      	movs	r0, #3
 80006c6:	f000 f91f 	bl	8000908 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006ca:	200f      	movs	r0, #15
 80006cc:	f000 f80e 	bl	80006ec <HAL_InitTick>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d002      	beq.n	80006dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
 80006d8:	71fb      	strb	r3, [r7, #7]
 80006da:	e001      	b.n	80006e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006dc:	f7ff feae 	bl	800043c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006e0:	79fb      	ldrb	r3, [r7, #7]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006f4:	2300      	movs	r3, #0
 80006f6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80006f8:	4b17      	ldr	r3, [pc, #92]	@ (8000758 <HAL_InitTick+0x6c>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d023      	beq.n	8000748 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000700:	4b16      	ldr	r3, [pc, #88]	@ (800075c <HAL_InitTick+0x70>)
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	4b14      	ldr	r3, [pc, #80]	@ (8000758 <HAL_InitTick+0x6c>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	4619      	mov	r1, r3
 800070a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800070e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000712:	fbb2 f3f3 	udiv	r3, r2, r3
 8000716:	4618      	mov	r0, r3
 8000718:	f000 f91d 	bl	8000956 <HAL_SYSTICK_Config>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d10f      	bne.n	8000742 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2b0f      	cmp	r3, #15
 8000726:	d809      	bhi.n	800073c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000728:	2200      	movs	r2, #0
 800072a:	6879      	ldr	r1, [r7, #4]
 800072c:	f04f 30ff 	mov.w	r0, #4294967295
 8000730:	f000 f8f5 	bl	800091e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000734:	4a0a      	ldr	r2, [pc, #40]	@ (8000760 <HAL_InitTick+0x74>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6013      	str	r3, [r2, #0]
 800073a:	e007      	b.n	800074c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800073c:	2301      	movs	r3, #1
 800073e:	73fb      	strb	r3, [r7, #15]
 8000740:	e004      	b.n	800074c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000742:	2301      	movs	r3, #1
 8000744:	73fb      	strb	r3, [r7, #15]
 8000746:	e001      	b.n	800074c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000748:	2301      	movs	r3, #1
 800074a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800074c:	7bfb      	ldrb	r3, [r7, #15]
}
 800074e:	4618      	mov	r0, r3
 8000750:	3710      	adds	r7, #16
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000008 	.word	0x20000008
 800075c:	20000000 	.word	0x20000000
 8000760:	20000004 	.word	0x20000004

08000764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000768:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <HAL_IncTick+0x20>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	461a      	mov	r2, r3
 800076e:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <HAL_IncTick+0x24>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4413      	add	r3, r2
 8000774:	4a04      	ldr	r2, [pc, #16]	@ (8000788 <HAL_IncTick+0x24>)
 8000776:	6013      	str	r3, [r2, #0]
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	20000008 	.word	0x20000008
 8000788:	200000c8 	.word	0x200000c8

0800078c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  return uwTick;
 8000790:	4b03      	ldr	r3, [pc, #12]	@ (80007a0 <HAL_GetTick+0x14>)
 8000792:	681b      	ldr	r3, [r3, #0]
}
 8000794:	4618      	mov	r0, r3
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	200000c8 	.word	0x200000c8

080007a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b4:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <__NVIC_SetPriorityGrouping+0x44>)
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ba:	68ba      	ldr	r2, [r7, #8]
 80007bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007c0:	4013      	ands	r3, r2
 80007c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007d6:	4a04      	ldr	r2, [pc, #16]	@ (80007e8 <__NVIC_SetPriorityGrouping+0x44>)
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	60d3      	str	r3, [r2, #12]
}
 80007dc:	bf00      	nop
 80007de:	3714      	adds	r7, #20
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f0:	4b04      	ldr	r3, [pc, #16]	@ (8000804 <__NVIC_GetPriorityGrouping+0x18>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	0a1b      	lsrs	r3, r3, #8
 80007f6:	f003 0307 	and.w	r3, r3, #7
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	6039      	str	r1, [r7, #0]
 8000812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000818:	2b00      	cmp	r3, #0
 800081a:	db0a      	blt.n	8000832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	b2da      	uxtb	r2, r3
 8000820:	490c      	ldr	r1, [pc, #48]	@ (8000854 <__NVIC_SetPriority+0x4c>)
 8000822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000826:	0112      	lsls	r2, r2, #4
 8000828:	b2d2      	uxtb	r2, r2
 800082a:	440b      	add	r3, r1
 800082c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000830:	e00a      	b.n	8000848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4908      	ldr	r1, [pc, #32]	@ (8000858 <__NVIC_SetPriority+0x50>)
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	f003 030f 	and.w	r3, r3, #15
 800083e:	3b04      	subs	r3, #4
 8000840:	0112      	lsls	r2, r2, #4
 8000842:	b2d2      	uxtb	r2, r2
 8000844:	440b      	add	r3, r1
 8000846:	761a      	strb	r2, [r3, #24]
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	e000e100 	.word	0xe000e100
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800085c:	b480      	push	{r7}
 800085e:	b089      	sub	sp, #36	@ 0x24
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	f003 0307 	and.w	r3, r3, #7
 800086e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	f1c3 0307 	rsb	r3, r3, #7
 8000876:	2b04      	cmp	r3, #4
 8000878:	bf28      	it	cs
 800087a:	2304      	movcs	r3, #4
 800087c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	3304      	adds	r3, #4
 8000882:	2b06      	cmp	r3, #6
 8000884:	d902      	bls.n	800088c <NVIC_EncodePriority+0x30>
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	3b03      	subs	r3, #3
 800088a:	e000      	b.n	800088e <NVIC_EncodePriority+0x32>
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000890:	f04f 32ff 	mov.w	r2, #4294967295
 8000894:	69bb      	ldr	r3, [r7, #24]
 8000896:	fa02 f303 	lsl.w	r3, r2, r3
 800089a:	43da      	mvns	r2, r3
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	401a      	ands	r2, r3
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008a4:	f04f 31ff 	mov.w	r1, #4294967295
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	fa01 f303 	lsl.w	r3, r1, r3
 80008ae:	43d9      	mvns	r1, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b4:	4313      	orrs	r3, r2
         );
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3724      	adds	r7, #36	@ 0x24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
	...

080008c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008d4:	d301      	bcc.n	80008da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008d6:	2301      	movs	r3, #1
 80008d8:	e00f      	b.n	80008fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008da:	4a0a      	ldr	r2, [pc, #40]	@ (8000904 <SysTick_Config+0x40>)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3b01      	subs	r3, #1
 80008e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008e2:	210f      	movs	r1, #15
 80008e4:	f04f 30ff 	mov.w	r0, #4294967295
 80008e8:	f7ff ff8e 	bl	8000808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008ec:	4b05      	ldr	r3, [pc, #20]	@ (8000904 <SysTick_Config+0x40>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008f2:	4b04      	ldr	r3, [pc, #16]	@ (8000904 <SysTick_Config+0x40>)
 80008f4:	2207      	movs	r2, #7
 80008f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	e000e010 	.word	0xe000e010

08000908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f7ff ff47 	bl	80007a4 <__NVIC_SetPriorityGrouping>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b086      	sub	sp, #24
 8000922:	af00      	add	r7, sp, #0
 8000924:	4603      	mov	r3, r0
 8000926:	60b9      	str	r1, [r7, #8]
 8000928:	607a      	str	r2, [r7, #4]
 800092a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000930:	f7ff ff5c 	bl	80007ec <__NVIC_GetPriorityGrouping>
 8000934:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	68b9      	ldr	r1, [r7, #8]
 800093a:	6978      	ldr	r0, [r7, #20]
 800093c:	f7ff ff8e 	bl	800085c <NVIC_EncodePriority>
 8000940:	4602      	mov	r2, r0
 8000942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000946:	4611      	mov	r1, r2
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ff5d 	bl	8000808 <__NVIC_SetPriority>
}
 800094e:	bf00      	nop
 8000950:	3718      	adds	r7, #24
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f7ff ffb0 	bl	80008c4 <SysTick_Config>
 8000964:	4603      	mov	r3, r0
}
 8000966:	4618      	mov	r0, r3
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000970:	b480      	push	{r7}
 8000972:	b087      	sub	sp, #28
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800097e:	e17f      	b.n	8000c80 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	2101      	movs	r1, #1
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	fa01 f303 	lsl.w	r3, r1, r3
 800098c:	4013      	ands	r3, r2
 800098e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	2b00      	cmp	r3, #0
 8000994:	f000 8171 	beq.w	8000c7a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	f003 0303 	and.w	r3, r3, #3
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d005      	beq.n	80009b0 <HAL_GPIO_Init+0x40>
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	f003 0303 	and.w	r3, r3, #3
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d130      	bne.n	8000a12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	2203      	movs	r2, #3
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	43db      	mvns	r3, r3
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	4013      	ands	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	68da      	ldr	r2, [r3, #12]
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	fa02 f303 	lsl.w	r3, r2, r3
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009e6:	2201      	movs	r2, #1
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	43db      	mvns	r3, r3
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	4013      	ands	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	091b      	lsrs	r3, r3, #4
 80009fc:	f003 0201 	and.w	r2, r3, #1
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	f003 0303 	and.w	r3, r3, #3
 8000a1a:	2b03      	cmp	r3, #3
 8000a1c:	d118      	bne.n	8000a50 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000a24:	2201      	movs	r2, #1
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2c:	43db      	mvns	r3, r3
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	4013      	ands	r3, r2
 8000a32:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	08db      	lsrs	r3, r3, #3
 8000a3a:	f003 0201 	and.w	r2, r3, #1
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f003 0303 	and.w	r3, r3, #3
 8000a58:	2b03      	cmp	r3, #3
 8000a5a:	d017      	beq.n	8000a8c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	2203      	movs	r2, #3
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	4013      	ands	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	689a      	ldr	r2, [r3, #8]
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f003 0303 	and.w	r3, r3, #3
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d123      	bne.n	8000ae0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	08da      	lsrs	r2, r3, #3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3208      	adds	r2, #8
 8000aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	f003 0307 	and.w	r3, r3, #7
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	220f      	movs	r2, #15
 8000ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	4013      	ands	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	691a      	ldr	r2, [r3, #16]
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	08da      	lsrs	r2, r3, #3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	3208      	adds	r2, #8
 8000ada:	6939      	ldr	r1, [r7, #16]
 8000adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	2203      	movs	r2, #3
 8000aec:	fa02 f303 	lsl.w	r3, r2, r3
 8000af0:	43db      	mvns	r3, r3
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4013      	ands	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f003 0203 	and.w	r2, r3, #3
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	f000 80ac 	beq.w	8000c7a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	4b5f      	ldr	r3, [pc, #380]	@ (8000ca0 <HAL_GPIO_Init+0x330>)
 8000b24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b26:	4a5e      	ldr	r2, [pc, #376]	@ (8000ca0 <HAL_GPIO_Init+0x330>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b2e:	4b5c      	ldr	r3, [pc, #368]	@ (8000ca0 <HAL_GPIO_Init+0x330>)
 8000b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b3a:	4a5a      	ldr	r2, [pc, #360]	@ (8000ca4 <HAL_GPIO_Init+0x334>)
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	089b      	lsrs	r3, r3, #2
 8000b40:	3302      	adds	r3, #2
 8000b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b46:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	f003 0303 	and.w	r3, r3, #3
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	220f      	movs	r2, #15
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43db      	mvns	r3, r3
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000b64:	d025      	beq.n	8000bb2 <HAL_GPIO_Init+0x242>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a4f      	ldr	r2, [pc, #316]	@ (8000ca8 <HAL_GPIO_Init+0x338>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d01f      	beq.n	8000bae <HAL_GPIO_Init+0x23e>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a4e      	ldr	r2, [pc, #312]	@ (8000cac <HAL_GPIO_Init+0x33c>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d019      	beq.n	8000baa <HAL_GPIO_Init+0x23a>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a4d      	ldr	r2, [pc, #308]	@ (8000cb0 <HAL_GPIO_Init+0x340>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d013      	beq.n	8000ba6 <HAL_GPIO_Init+0x236>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4a4c      	ldr	r2, [pc, #304]	@ (8000cb4 <HAL_GPIO_Init+0x344>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d00d      	beq.n	8000ba2 <HAL_GPIO_Init+0x232>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4a4b      	ldr	r2, [pc, #300]	@ (8000cb8 <HAL_GPIO_Init+0x348>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d007      	beq.n	8000b9e <HAL_GPIO_Init+0x22e>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a4a      	ldr	r2, [pc, #296]	@ (8000cbc <HAL_GPIO_Init+0x34c>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d101      	bne.n	8000b9a <HAL_GPIO_Init+0x22a>
 8000b96:	2306      	movs	r3, #6
 8000b98:	e00c      	b.n	8000bb4 <HAL_GPIO_Init+0x244>
 8000b9a:	2307      	movs	r3, #7
 8000b9c:	e00a      	b.n	8000bb4 <HAL_GPIO_Init+0x244>
 8000b9e:	2305      	movs	r3, #5
 8000ba0:	e008      	b.n	8000bb4 <HAL_GPIO_Init+0x244>
 8000ba2:	2304      	movs	r3, #4
 8000ba4:	e006      	b.n	8000bb4 <HAL_GPIO_Init+0x244>
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	e004      	b.n	8000bb4 <HAL_GPIO_Init+0x244>
 8000baa:	2302      	movs	r3, #2
 8000bac:	e002      	b.n	8000bb4 <HAL_GPIO_Init+0x244>
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e000      	b.n	8000bb4 <HAL_GPIO_Init+0x244>
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	697a      	ldr	r2, [r7, #20]
 8000bb6:	f002 0203 	and.w	r2, r2, #3
 8000bba:	0092      	lsls	r2, r2, #2
 8000bbc:	4093      	lsls	r3, r2
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bc4:	4937      	ldr	r1, [pc, #220]	@ (8000ca4 <HAL_GPIO_Init+0x334>)
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	089b      	lsrs	r3, r3, #2
 8000bca:	3302      	adds	r3, #2
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000bd2:	4b3b      	ldr	r3, [pc, #236]	@ (8000cc0 <HAL_GPIO_Init+0x350>)
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	43db      	mvns	r3, r3
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	4013      	ands	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d003      	beq.n	8000bf6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000bf6:	4a32      	ldr	r2, [pc, #200]	@ (8000cc0 <HAL_GPIO_Init+0x350>)
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000bfc:	4b30      	ldr	r3, [pc, #192]	@ (8000cc0 <HAL_GPIO_Init+0x350>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	43db      	mvns	r3, r3
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d003      	beq.n	8000c20 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c20:	4a27      	ldr	r2, [pc, #156]	@ (8000cc0 <HAL_GPIO_Init+0x350>)
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c26:	4b26      	ldr	r3, [pc, #152]	@ (8000cc0 <HAL_GPIO_Init+0x350>)
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	4013      	ands	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d003      	beq.n	8000c4a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c4a:	4a1d      	ldr	r2, [pc, #116]	@ (8000cc0 <HAL_GPIO_Init+0x350>)
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000c50:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc0 <HAL_GPIO_Init+0x350>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d003      	beq.n	8000c74 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c74:	4a12      	ldr	r2, [pc, #72]	@ (8000cc0 <HAL_GPIO_Init+0x350>)
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	fa22 f303 	lsr.w	r3, r2, r3
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f47f ae78 	bne.w	8000980 <HAL_GPIO_Init+0x10>
  }
}
 8000c90:	bf00      	nop
 8000c92:	bf00      	nop
 8000c94:	371c      	adds	r7, #28
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	40010000 	.word	0x40010000
 8000ca8:	48000400 	.word	0x48000400
 8000cac:	48000800 	.word	0x48000800
 8000cb0:	48000c00 	.word	0x48000c00
 8000cb4:	48001000 	.word	0x48001000
 8000cb8:	48001400 	.word	0x48001400
 8000cbc:	48001800 	.word	0x48001800
 8000cc0:	40010400 	.word	0x40010400

08000cc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d101      	bne.n	8000cd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e08d      	b.n	8000df2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d106      	bne.n	8000cf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f7ff fbca 	bl	8000484 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2224      	movs	r2, #36	@ 0x24
 8000cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f022 0201 	bic.w	r2, r2, #1
 8000d06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685a      	ldr	r2, [r3, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000d14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	689a      	ldr	r2, [r3, #8]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000d24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d107      	bne.n	8000d3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	689a      	ldr	r2, [r3, #8]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	e006      	b.n	8000d4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	689a      	ldr	r2, [r3, #8]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8000d4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d108      	bne.n	8000d66 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	685a      	ldr	r2, [r3, #4]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	e007      	b.n	8000d76 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	685a      	ldr	r2, [r3, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000d74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	6812      	ldr	r2, [r2, #0]
 8000d80:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	68da      	ldr	r2, [r3, #12]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000d98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	691a      	ldr	r2, [r3, #16]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	695b      	ldr	r3, [r3, #20]
 8000da2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	430a      	orrs	r2, r1
 8000db2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	69d9      	ldr	r1, [r3, #28]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6a1a      	ldr	r2, [r3, #32]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f042 0201 	orr.w	r2, r2, #1
 8000dd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2220      	movs	r2, #32
 8000dde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2200      	movs	r2, #0
 8000de6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b083      	sub	sp, #12
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
 8000e02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	2b20      	cmp	r3, #32
 8000e0e:	d138      	bne.n	8000e82 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d101      	bne.n	8000e1e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	e032      	b.n	8000e84 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2201      	movs	r2, #1
 8000e22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2224      	movs	r2, #36	@ 0x24
 8000e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f022 0201 	bic.w	r2, r2, #1
 8000e3c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000e4c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	6819      	ldr	r1, [r3, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	683a      	ldr	r2, [r7, #0]
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f042 0201 	orr.w	r2, r2, #1
 8000e6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2220      	movs	r2, #32
 8000e72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e000      	b.n	8000e84 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000e82:	2302      	movs	r3, #2
  }
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b20      	cmp	r3, #32
 8000ea4:	d139      	bne.n	8000f1a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d101      	bne.n	8000eb4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	e033      	b.n	8000f1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2224      	movs	r2, #36	@ 0x24
 8000ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f022 0201 	bic.w	r2, r2, #1
 8000ed2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000ee2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	021b      	lsls	r3, r3, #8
 8000ee8:	68fa      	ldr	r2, [r7, #12]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f042 0201 	orr.w	r2, r2, #1
 8000f04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2220      	movs	r2, #32
 8000f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8000f16:	2300      	movs	r3, #0
 8000f18:	e000      	b.n	8000f1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000f1a:	2302      	movs	r3, #2
  }
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f2c:	4b04      	ldr	r3, [pc, #16]	@ (8000f40 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40007000 	.word	0x40007000

08000f44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f52:	d130      	bne.n	8000fb6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f54:	4b23      	ldr	r3, [pc, #140]	@ (8000fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000f5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f60:	d038      	beq.n	8000fd4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f62:	4b20      	ldr	r3, [pc, #128]	@ (8000fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000f6a:	4a1e      	ldr	r2, [pc, #120]	@ (8000fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f6c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f70:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f72:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2232      	movs	r2, #50	@ 0x32
 8000f78:	fb02 f303 	mul.w	r3, r2, r3
 8000f7c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f82:	0c9b      	lsrs	r3, r3, #18
 8000f84:	3301      	adds	r3, #1
 8000f86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f88:	e002      	b.n	8000f90 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f90:	4b14      	ldr	r3, [pc, #80]	@ (8000fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f92:	695b      	ldr	r3, [r3, #20]
 8000f94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f9c:	d102      	bne.n	8000fa4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d1f2      	bne.n	8000f8a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fb0:	d110      	bne.n	8000fd4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e00f      	b.n	8000fd6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fc2:	d007      	beq.n	8000fd4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fc4:	4b07      	ldr	r3, [pc, #28]	@ (8000fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000fcc:	4a05      	ldr	r2, [pc, #20]	@ (8000fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fd2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	40007000 	.word	0x40007000
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	431bde83 	.word	0x431bde83

08000ff0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d101      	bne.n	8001002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e3ca      	b.n	8001798 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001002:	4b97      	ldr	r3, [pc, #604]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f003 030c 	and.w	r3, r3, #12
 800100a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800100c:	4b94      	ldr	r3, [pc, #592]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0310 	and.w	r3, r3, #16
 800101e:	2b00      	cmp	r3, #0
 8001020:	f000 80e4 	beq.w	80011ec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d007      	beq.n	800103a <HAL_RCC_OscConfig+0x4a>
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	2b0c      	cmp	r3, #12
 800102e:	f040 808b 	bne.w	8001148 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	2b01      	cmp	r3, #1
 8001036:	f040 8087 	bne.w	8001148 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800103a:	4b89      	ldr	r3, [pc, #548]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	2b00      	cmp	r3, #0
 8001044:	d005      	beq.n	8001052 <HAL_RCC_OscConfig+0x62>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e3a2      	b.n	8001798 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6a1a      	ldr	r2, [r3, #32]
 8001056:	4b82      	ldr	r3, [pc, #520]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0308 	and.w	r3, r3, #8
 800105e:	2b00      	cmp	r3, #0
 8001060:	d004      	beq.n	800106c <HAL_RCC_OscConfig+0x7c>
 8001062:	4b7f      	ldr	r3, [pc, #508]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800106a:	e005      	b.n	8001078 <HAL_RCC_OscConfig+0x88>
 800106c:	4b7c      	ldr	r3, [pc, #496]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 800106e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001072:	091b      	lsrs	r3, r3, #4
 8001074:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001078:	4293      	cmp	r3, r2
 800107a:	d223      	bcs.n	80010c4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a1b      	ldr	r3, [r3, #32]
 8001080:	4618      	mov	r0, r3
 8001082:	f000 fd1d 	bl	8001ac0 <RCC_SetFlashLatencyFromMSIRange>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e383      	b.n	8001798 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001090:	4b73      	ldr	r3, [pc, #460]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a72      	ldr	r2, [pc, #456]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 8001096:	f043 0308 	orr.w	r3, r3, #8
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	4b70      	ldr	r3, [pc, #448]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a1b      	ldr	r3, [r3, #32]
 80010a8:	496d      	ldr	r1, [pc, #436]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 80010aa:	4313      	orrs	r3, r2
 80010ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010ae:	4b6c      	ldr	r3, [pc, #432]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	4968      	ldr	r1, [pc, #416]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 80010be:	4313      	orrs	r3, r2
 80010c0:	604b      	str	r3, [r1, #4]
 80010c2:	e025      	b.n	8001110 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010c4:	4b66      	ldr	r3, [pc, #408]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a65      	ldr	r2, [pc, #404]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 80010ca:	f043 0308 	orr.w	r3, r3, #8
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	4b63      	ldr	r3, [pc, #396]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6a1b      	ldr	r3, [r3, #32]
 80010dc:	4960      	ldr	r1, [pc, #384]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 80010de:	4313      	orrs	r3, r2
 80010e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010e2:	4b5f      	ldr	r3, [pc, #380]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	495b      	ldr	r1, [pc, #364]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 80010f2:	4313      	orrs	r3, r2
 80010f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d109      	bne.n	8001110 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a1b      	ldr	r3, [r3, #32]
 8001100:	4618      	mov	r0, r3
 8001102:	f000 fcdd 	bl	8001ac0 <RCC_SetFlashLatencyFromMSIRange>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e343      	b.n	8001798 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001110:	f000 fc4a 	bl	80019a8 <HAL_RCC_GetSysClockFreq>
 8001114:	4602      	mov	r2, r0
 8001116:	4b52      	ldr	r3, [pc, #328]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	091b      	lsrs	r3, r3, #4
 800111c:	f003 030f 	and.w	r3, r3, #15
 8001120:	4950      	ldr	r1, [pc, #320]	@ (8001264 <HAL_RCC_OscConfig+0x274>)
 8001122:	5ccb      	ldrb	r3, [r1, r3]
 8001124:	f003 031f 	and.w	r3, r3, #31
 8001128:	fa22 f303 	lsr.w	r3, r2, r3
 800112c:	4a4e      	ldr	r2, [pc, #312]	@ (8001268 <HAL_RCC_OscConfig+0x278>)
 800112e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001130:	4b4e      	ldr	r3, [pc, #312]	@ (800126c <HAL_RCC_OscConfig+0x27c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fad9 	bl	80006ec <HAL_InitTick>
 800113a:	4603      	mov	r3, r0
 800113c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d052      	beq.n	80011ea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	e327      	b.n	8001798 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d032      	beq.n	80011b6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001150:	4b43      	ldr	r3, [pc, #268]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a42      	ldr	r2, [pc, #264]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800115c:	f7ff fb16 	bl	800078c <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001164:	f7ff fb12 	bl	800078c <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e310      	b.n	8001798 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001176:	4b3a      	ldr	r3, [pc, #232]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d0f0      	beq.n	8001164 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001182:	4b37      	ldr	r3, [pc, #220]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a36      	ldr	r2, [pc, #216]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 8001188:	f043 0308 	orr.w	r3, r3, #8
 800118c:	6013      	str	r3, [r2, #0]
 800118e:	4b34      	ldr	r3, [pc, #208]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a1b      	ldr	r3, [r3, #32]
 800119a:	4931      	ldr	r1, [pc, #196]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 800119c:	4313      	orrs	r3, r2
 800119e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	69db      	ldr	r3, [r3, #28]
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	492c      	ldr	r1, [pc, #176]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 80011b0:	4313      	orrs	r3, r2
 80011b2:	604b      	str	r3, [r1, #4]
 80011b4:	e01a      	b.n	80011ec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a29      	ldr	r2, [pc, #164]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 80011bc:	f023 0301 	bic.w	r3, r3, #1
 80011c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011c2:	f7ff fae3 	bl	800078c <HAL_GetTick>
 80011c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011c8:	e008      	b.n	80011dc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011ca:	f7ff fadf 	bl	800078c <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d901      	bls.n	80011dc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e2dd      	b.n	8001798 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011dc:	4b20      	ldr	r3, [pc, #128]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1f0      	bne.n	80011ca <HAL_RCC_OscConfig+0x1da>
 80011e8:	e000      	b.n	80011ec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d074      	beq.n	80012e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	2b08      	cmp	r3, #8
 80011fc:	d005      	beq.n	800120a <HAL_RCC_OscConfig+0x21a>
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	2b0c      	cmp	r3, #12
 8001202:	d10e      	bne.n	8001222 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	2b03      	cmp	r3, #3
 8001208:	d10b      	bne.n	8001222 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800120a:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d064      	beq.n	80012e0 <HAL_RCC_OscConfig+0x2f0>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d160      	bne.n	80012e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e2ba      	b.n	8001798 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800122a:	d106      	bne.n	800123a <HAL_RCC_OscConfig+0x24a>
 800122c:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0b      	ldr	r2, [pc, #44]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 8001232:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001236:	6013      	str	r3, [r2, #0]
 8001238:	e026      	b.n	8001288 <HAL_RCC_OscConfig+0x298>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001242:	d115      	bne.n	8001270 <HAL_RCC_OscConfig+0x280>
 8001244:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a05      	ldr	r2, [pc, #20]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 800124a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	4b03      	ldr	r3, [pc, #12]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a02      	ldr	r2, [pc, #8]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 8001256:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800125a:	6013      	str	r3, [r2, #0]
 800125c:	e014      	b.n	8001288 <HAL_RCC_OscConfig+0x298>
 800125e:	bf00      	nop
 8001260:	40021000 	.word	0x40021000
 8001264:	08003048 	.word	0x08003048
 8001268:	20000000 	.word	0x20000000
 800126c:	20000004 	.word	0x20000004
 8001270:	4ba0      	ldr	r3, [pc, #640]	@ (80014f4 <HAL_RCC_OscConfig+0x504>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a9f      	ldr	r2, [pc, #636]	@ (80014f4 <HAL_RCC_OscConfig+0x504>)
 8001276:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	4b9d      	ldr	r3, [pc, #628]	@ (80014f4 <HAL_RCC_OscConfig+0x504>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a9c      	ldr	r2, [pc, #624]	@ (80014f4 <HAL_RCC_OscConfig+0x504>)
 8001282:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d013      	beq.n	80012b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001290:	f7ff fa7c 	bl	800078c <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001298:	f7ff fa78 	bl	800078c <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b64      	cmp	r3, #100	@ 0x64
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e276      	b.n	8001798 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012aa:	4b92      	ldr	r3, [pc, #584]	@ (80014f4 <HAL_RCC_OscConfig+0x504>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0f0      	beq.n	8001298 <HAL_RCC_OscConfig+0x2a8>
 80012b6:	e014      	b.n	80012e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b8:	f7ff fa68 	bl	800078c <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c0:	f7ff fa64 	bl	800078c <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b64      	cmp	r3, #100	@ 0x64
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e262      	b.n	8001798 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012d2:	4b88      	ldr	r3, [pc, #544]	@ (80014f4 <HAL_RCC_OscConfig+0x504>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1f0      	bne.n	80012c0 <HAL_RCC_OscConfig+0x2d0>
 80012de:	e000      	b.n	80012e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d060      	beq.n	80013b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	2b04      	cmp	r3, #4
 80012f2:	d005      	beq.n	8001300 <HAL_RCC_OscConfig+0x310>
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	2b0c      	cmp	r3, #12
 80012f8:	d119      	bne.n	800132e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d116      	bne.n	800132e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001300:	4b7c      	ldr	r3, [pc, #496]	@ (80014f4 <HAL_RCC_OscConfig+0x504>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001308:	2b00      	cmp	r3, #0
 800130a:	d005      	beq.n	8001318 <HAL_RCC_OscConfig+0x328>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d101      	bne.n	8001318 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e23f      	b.n	8001798 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001318:	4b76      	ldr	r3, [pc, #472]	@ (80014f4 <HAL_RCC_OscConfig+0x504>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	061b      	lsls	r3, r3, #24
 8001326:	4973      	ldr	r1, [pc, #460]	@ (80014f4 <HAL_RCC_OscConfig+0x504>)
 8001328:	4313      	orrs	r3, r2
 800132a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800132c:	e040      	b.n	80013b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d023      	beq.n	800137e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001336:	4b6f      	ldr	r3, [pc, #444]	@ (80014f4 <HAL_RCC_OscConfig+0x504>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a6e      	ldr	r2, [pc, #440]	@ (80014f4 <HAL_RCC_OscConfig+0x504>)
 800133c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001340:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001342:	f7ff fa23 	bl	800078c <HAL_GetTick>
 8001346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001348:	e008      	b.n	800135c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800134a:	f7ff fa1f 	bl	800078c <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e21d      	b.n	8001798 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800135c:	4b65      	ldr	r3, [pc, #404]	@ (80014f4 <HAL_RCC_OscConfig+0x504>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0f0      	beq.n	800134a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001368:	4b62      	ldr	r3, [pc, #392]	@ (80014f4 <HAL_RCC_OscConfig+0x504>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	061b      	lsls	r3, r3, #24
 8001376:	495f      	ldr	r1, [pc, #380]	@ (80014f4 <HAL_RCC_OscConfig+0x504>)
 8001378:	4313      	orrs	r3, r2
 800137a:	604b      	str	r3, [r1, #4]
 800137c:	e018      	b.n	80013b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800137e:	4b5d      	ldr	r3, [pc, #372]	@ (80014f4 <HAL_RCC_OscConfig+0x504>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a5c      	ldr	r2, [pc, #368]	@ (80014f4 <HAL_RCC_OscConfig+0x504>)
 8001384:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001388:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138a:	f7ff f9ff 	bl	800078c <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001392:	f7ff f9fb 	bl	800078c <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e1f9      	b.n	8001798 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013a4:	4b53      	ldr	r3, [pc, #332]	@ (80014f4 <HAL_RCC_OscConfig+0x504>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1f0      	bne.n	8001392 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0308 	and.w	r3, r3, #8
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d03c      	beq.n	8001436 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	695b      	ldr	r3, [r3, #20]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d01c      	beq.n	80013fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013c4:	4b4b      	ldr	r3, [pc, #300]	@ (80014f4 <HAL_RCC_OscConfig+0x504>)
 80013c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013ca:	4a4a      	ldr	r2, [pc, #296]	@ (80014f4 <HAL_RCC_OscConfig+0x504>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d4:	f7ff f9da 	bl	800078c <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013dc:	f7ff f9d6 	bl	800078c <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e1d4      	b.n	8001798 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013ee:	4b41      	ldr	r3, [pc, #260]	@ (80014f4 <HAL_RCC_OscConfig+0x504>)
 80013f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0ef      	beq.n	80013dc <HAL_RCC_OscConfig+0x3ec>
 80013fc:	e01b      	b.n	8001436 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013fe:	4b3d      	ldr	r3, [pc, #244]	@ (80014f4 <HAL_RCC_OscConfig+0x504>)
 8001400:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001404:	4a3b      	ldr	r2, [pc, #236]	@ (80014f4 <HAL_RCC_OscConfig+0x504>)
 8001406:	f023 0301 	bic.w	r3, r3, #1
 800140a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800140e:	f7ff f9bd 	bl	800078c <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001416:	f7ff f9b9 	bl	800078c <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e1b7      	b.n	8001798 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001428:	4b32      	ldr	r3, [pc, #200]	@ (80014f4 <HAL_RCC_OscConfig+0x504>)
 800142a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1ef      	bne.n	8001416 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0304 	and.w	r3, r3, #4
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 80a6 	beq.w	8001590 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001444:	2300      	movs	r3, #0
 8001446:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001448:	4b2a      	ldr	r3, [pc, #168]	@ (80014f4 <HAL_RCC_OscConfig+0x504>)
 800144a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800144c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d10d      	bne.n	8001470 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001454:	4b27      	ldr	r3, [pc, #156]	@ (80014f4 <HAL_RCC_OscConfig+0x504>)
 8001456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001458:	4a26      	ldr	r2, [pc, #152]	@ (80014f4 <HAL_RCC_OscConfig+0x504>)
 800145a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800145e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001460:	4b24      	ldr	r3, [pc, #144]	@ (80014f4 <HAL_RCC_OscConfig+0x504>)
 8001462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001464:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800146c:	2301      	movs	r3, #1
 800146e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001470:	4b21      	ldr	r3, [pc, #132]	@ (80014f8 <HAL_RCC_OscConfig+0x508>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001478:	2b00      	cmp	r3, #0
 800147a:	d118      	bne.n	80014ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800147c:	4b1e      	ldr	r3, [pc, #120]	@ (80014f8 <HAL_RCC_OscConfig+0x508>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a1d      	ldr	r2, [pc, #116]	@ (80014f8 <HAL_RCC_OscConfig+0x508>)
 8001482:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001486:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001488:	f7ff f980 	bl	800078c <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001490:	f7ff f97c 	bl	800078c <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e17a      	b.n	8001798 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014a2:	4b15      	ldr	r3, [pc, #84]	@ (80014f8 <HAL_RCC_OscConfig+0x508>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f0      	beq.n	8001490 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d108      	bne.n	80014c8 <HAL_RCC_OscConfig+0x4d8>
 80014b6:	4b0f      	ldr	r3, [pc, #60]	@ (80014f4 <HAL_RCC_OscConfig+0x504>)
 80014b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014bc:	4a0d      	ldr	r2, [pc, #52]	@ (80014f4 <HAL_RCC_OscConfig+0x504>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80014c6:	e029      	b.n	800151c <HAL_RCC_OscConfig+0x52c>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	2b05      	cmp	r3, #5
 80014ce:	d115      	bne.n	80014fc <HAL_RCC_OscConfig+0x50c>
 80014d0:	4b08      	ldr	r3, [pc, #32]	@ (80014f4 <HAL_RCC_OscConfig+0x504>)
 80014d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014d6:	4a07      	ldr	r2, [pc, #28]	@ (80014f4 <HAL_RCC_OscConfig+0x504>)
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80014e0:	4b04      	ldr	r3, [pc, #16]	@ (80014f4 <HAL_RCC_OscConfig+0x504>)
 80014e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014e6:	4a03      	ldr	r2, [pc, #12]	@ (80014f4 <HAL_RCC_OscConfig+0x504>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80014f0:	e014      	b.n	800151c <HAL_RCC_OscConfig+0x52c>
 80014f2:	bf00      	nop
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40007000 	.word	0x40007000
 80014fc:	4b9c      	ldr	r3, [pc, #624]	@ (8001770 <HAL_RCC_OscConfig+0x780>)
 80014fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001502:	4a9b      	ldr	r2, [pc, #620]	@ (8001770 <HAL_RCC_OscConfig+0x780>)
 8001504:	f023 0301 	bic.w	r3, r3, #1
 8001508:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800150c:	4b98      	ldr	r3, [pc, #608]	@ (8001770 <HAL_RCC_OscConfig+0x780>)
 800150e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001512:	4a97      	ldr	r2, [pc, #604]	@ (8001770 <HAL_RCC_OscConfig+0x780>)
 8001514:	f023 0304 	bic.w	r3, r3, #4
 8001518:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d016      	beq.n	8001552 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001524:	f7ff f932 	bl	800078c <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800152a:	e00a      	b.n	8001542 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800152c:	f7ff f92e 	bl	800078c <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	f241 3288 	movw	r2, #5000	@ 0x1388
 800153a:	4293      	cmp	r3, r2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e12a      	b.n	8001798 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001542:	4b8b      	ldr	r3, [pc, #556]	@ (8001770 <HAL_RCC_OscConfig+0x780>)
 8001544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0ed      	beq.n	800152c <HAL_RCC_OscConfig+0x53c>
 8001550:	e015      	b.n	800157e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001552:	f7ff f91b 	bl	800078c <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001558:	e00a      	b.n	8001570 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800155a:	f7ff f917 	bl	800078c <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001568:	4293      	cmp	r3, r2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e113      	b.n	8001798 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001570:	4b7f      	ldr	r3, [pc, #508]	@ (8001770 <HAL_RCC_OscConfig+0x780>)
 8001572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1ed      	bne.n	800155a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800157e:	7ffb      	ldrb	r3, [r7, #31]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d105      	bne.n	8001590 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001584:	4b7a      	ldr	r3, [pc, #488]	@ (8001770 <HAL_RCC_OscConfig+0x780>)
 8001586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001588:	4a79      	ldr	r2, [pc, #484]	@ (8001770 <HAL_RCC_OscConfig+0x780>)
 800158a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800158e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001594:	2b00      	cmp	r3, #0
 8001596:	f000 80fe 	beq.w	8001796 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800159e:	2b02      	cmp	r3, #2
 80015a0:	f040 80d0 	bne.w	8001744 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80015a4:	4b72      	ldr	r3, [pc, #456]	@ (8001770 <HAL_RCC_OscConfig+0x780>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	f003 0203 	and.w	r2, r3, #3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d130      	bne.n	800161a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	3b01      	subs	r3, #1
 80015c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d127      	bne.n	800161a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d11f      	bne.n	800161a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80015e4:	2a07      	cmp	r2, #7
 80015e6:	bf14      	ite	ne
 80015e8:	2201      	movne	r2, #1
 80015ea:	2200      	moveq	r2, #0
 80015ec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d113      	bne.n	800161a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015fc:	085b      	lsrs	r3, r3, #1
 80015fe:	3b01      	subs	r3, #1
 8001600:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001602:	429a      	cmp	r2, r3
 8001604:	d109      	bne.n	800161a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001610:	085b      	lsrs	r3, r3, #1
 8001612:	3b01      	subs	r3, #1
 8001614:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001616:	429a      	cmp	r2, r3
 8001618:	d06e      	beq.n	80016f8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	2b0c      	cmp	r3, #12
 800161e:	d069      	beq.n	80016f4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001620:	4b53      	ldr	r3, [pc, #332]	@ (8001770 <HAL_RCC_OscConfig+0x780>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d105      	bne.n	8001638 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800162c:	4b50      	ldr	r3, [pc, #320]	@ (8001770 <HAL_RCC_OscConfig+0x780>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e0ad      	b.n	8001798 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800163c:	4b4c      	ldr	r3, [pc, #304]	@ (8001770 <HAL_RCC_OscConfig+0x780>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a4b      	ldr	r2, [pc, #300]	@ (8001770 <HAL_RCC_OscConfig+0x780>)
 8001642:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001646:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001648:	f7ff f8a0 	bl	800078c <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001650:	f7ff f89c 	bl	800078c <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e09a      	b.n	8001798 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001662:	4b43      	ldr	r3, [pc, #268]	@ (8001770 <HAL_RCC_OscConfig+0x780>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800166e:	4b40      	ldr	r3, [pc, #256]	@ (8001770 <HAL_RCC_OscConfig+0x780>)
 8001670:	68da      	ldr	r2, [r3, #12]
 8001672:	4b40      	ldr	r3, [pc, #256]	@ (8001774 <HAL_RCC_OscConfig+0x784>)
 8001674:	4013      	ands	r3, r2
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800167e:	3a01      	subs	r2, #1
 8001680:	0112      	lsls	r2, r2, #4
 8001682:	4311      	orrs	r1, r2
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001688:	0212      	lsls	r2, r2, #8
 800168a:	4311      	orrs	r1, r2
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001690:	0852      	lsrs	r2, r2, #1
 8001692:	3a01      	subs	r2, #1
 8001694:	0552      	lsls	r2, r2, #21
 8001696:	4311      	orrs	r1, r2
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800169c:	0852      	lsrs	r2, r2, #1
 800169e:	3a01      	subs	r2, #1
 80016a0:	0652      	lsls	r2, r2, #25
 80016a2:	4311      	orrs	r1, r2
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80016a8:	0912      	lsrs	r2, r2, #4
 80016aa:	0452      	lsls	r2, r2, #17
 80016ac:	430a      	orrs	r2, r1
 80016ae:	4930      	ldr	r1, [pc, #192]	@ (8001770 <HAL_RCC_OscConfig+0x780>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80016b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001770 <HAL_RCC_OscConfig+0x780>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a2d      	ldr	r2, [pc, #180]	@ (8001770 <HAL_RCC_OscConfig+0x780>)
 80016ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001770 <HAL_RCC_OscConfig+0x780>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	4a2a      	ldr	r2, [pc, #168]	@ (8001770 <HAL_RCC_OscConfig+0x780>)
 80016c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016cc:	f7ff f85e 	bl	800078c <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d4:	f7ff f85a 	bl	800078c <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e058      	b.n	8001798 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016e6:	4b22      	ldr	r3, [pc, #136]	@ (8001770 <HAL_RCC_OscConfig+0x780>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016f2:	e050      	b.n	8001796 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e04f      	b.n	8001798 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001770 <HAL_RCC_OscConfig+0x780>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d148      	bne.n	8001796 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001704:	4b1a      	ldr	r3, [pc, #104]	@ (8001770 <HAL_RCC_OscConfig+0x780>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a19      	ldr	r2, [pc, #100]	@ (8001770 <HAL_RCC_OscConfig+0x780>)
 800170a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800170e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001710:	4b17      	ldr	r3, [pc, #92]	@ (8001770 <HAL_RCC_OscConfig+0x780>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	4a16      	ldr	r2, [pc, #88]	@ (8001770 <HAL_RCC_OscConfig+0x780>)
 8001716:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800171a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800171c:	f7ff f836 	bl	800078c <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001724:	f7ff f832 	bl	800078c <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e030      	b.n	8001798 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001736:	4b0e      	ldr	r3, [pc, #56]	@ (8001770 <HAL_RCC_OscConfig+0x780>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0f0      	beq.n	8001724 <HAL_RCC_OscConfig+0x734>
 8001742:	e028      	b.n	8001796 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	2b0c      	cmp	r3, #12
 8001748:	d023      	beq.n	8001792 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174a:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <HAL_RCC_OscConfig+0x780>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a08      	ldr	r2, [pc, #32]	@ (8001770 <HAL_RCC_OscConfig+0x780>)
 8001750:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001756:	f7ff f819 	bl	800078c <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800175c:	e00c      	b.n	8001778 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800175e:	f7ff f815 	bl	800078c <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d905      	bls.n	8001778 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e013      	b.n	8001798 <HAL_RCC_OscConfig+0x7a8>
 8001770:	40021000 	.word	0x40021000
 8001774:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001778:	4b09      	ldr	r3, [pc, #36]	@ (80017a0 <HAL_RCC_OscConfig+0x7b0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1ec      	bne.n	800175e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001784:	4b06      	ldr	r3, [pc, #24]	@ (80017a0 <HAL_RCC_OscConfig+0x7b0>)
 8001786:	68da      	ldr	r2, [r3, #12]
 8001788:	4905      	ldr	r1, [pc, #20]	@ (80017a0 <HAL_RCC_OscConfig+0x7b0>)
 800178a:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <HAL_RCC_OscConfig+0x7b4>)
 800178c:	4013      	ands	r3, r2
 800178e:	60cb      	str	r3, [r1, #12]
 8001790:	e001      	b.n	8001796 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e000      	b.n	8001798 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3720      	adds	r7, #32
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40021000 	.word	0x40021000
 80017a4:	feeefffc 	.word	0xfeeefffc

080017a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e0e7      	b.n	800198c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017bc:	4b75      	ldr	r3, [pc, #468]	@ (8001994 <HAL_RCC_ClockConfig+0x1ec>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d910      	bls.n	80017ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ca:	4b72      	ldr	r3, [pc, #456]	@ (8001994 <HAL_RCC_ClockConfig+0x1ec>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f023 0207 	bic.w	r2, r3, #7
 80017d2:	4970      	ldr	r1, [pc, #448]	@ (8001994 <HAL_RCC_ClockConfig+0x1ec>)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017da:	4b6e      	ldr	r3, [pc, #440]	@ (8001994 <HAL_RCC_ClockConfig+0x1ec>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d001      	beq.n	80017ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e0cf      	b.n	800198c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d010      	beq.n	800181a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	4b66      	ldr	r3, [pc, #408]	@ (8001998 <HAL_RCC_ClockConfig+0x1f0>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001804:	429a      	cmp	r2, r3
 8001806:	d908      	bls.n	800181a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001808:	4b63      	ldr	r3, [pc, #396]	@ (8001998 <HAL_RCC_ClockConfig+0x1f0>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	4960      	ldr	r1, [pc, #384]	@ (8001998 <HAL_RCC_ClockConfig+0x1f0>)
 8001816:	4313      	orrs	r3, r2
 8001818:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b00      	cmp	r3, #0
 8001824:	d04c      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b03      	cmp	r3, #3
 800182c:	d107      	bne.n	800183e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800182e:	4b5a      	ldr	r3, [pc, #360]	@ (8001998 <HAL_RCC_ClockConfig+0x1f0>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d121      	bne.n	800187e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e0a6      	b.n	800198c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d107      	bne.n	8001856 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001846:	4b54      	ldr	r3, [pc, #336]	@ (8001998 <HAL_RCC_ClockConfig+0x1f0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d115      	bne.n	800187e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e09a      	b.n	800198c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d107      	bne.n	800186e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800185e:	4b4e      	ldr	r3, [pc, #312]	@ (8001998 <HAL_RCC_ClockConfig+0x1f0>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d109      	bne.n	800187e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e08e      	b.n	800198c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800186e:	4b4a      	ldr	r3, [pc, #296]	@ (8001998 <HAL_RCC_ClockConfig+0x1f0>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e086      	b.n	800198c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800187e:	4b46      	ldr	r3, [pc, #280]	@ (8001998 <HAL_RCC_ClockConfig+0x1f0>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f023 0203 	bic.w	r2, r3, #3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	4943      	ldr	r1, [pc, #268]	@ (8001998 <HAL_RCC_ClockConfig+0x1f0>)
 800188c:	4313      	orrs	r3, r2
 800188e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001890:	f7fe ff7c 	bl	800078c <HAL_GetTick>
 8001894:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001896:	e00a      	b.n	80018ae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001898:	f7fe ff78 	bl	800078c <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e06e      	b.n	800198c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001998 <HAL_RCC_ClockConfig+0x1f0>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 020c 	and.w	r2, r3, #12
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	429a      	cmp	r2, r3
 80018be:	d1eb      	bne.n	8001898 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d010      	beq.n	80018ee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	4b31      	ldr	r3, [pc, #196]	@ (8001998 <HAL_RCC_ClockConfig+0x1f0>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018d8:	429a      	cmp	r2, r3
 80018da:	d208      	bcs.n	80018ee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001998 <HAL_RCC_ClockConfig+0x1f0>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	492b      	ldr	r1, [pc, #172]	@ (8001998 <HAL_RCC_ClockConfig+0x1f0>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018ee:	4b29      	ldr	r3, [pc, #164]	@ (8001994 <HAL_RCC_ClockConfig+0x1ec>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d210      	bcs.n	800191e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fc:	4b25      	ldr	r3, [pc, #148]	@ (8001994 <HAL_RCC_ClockConfig+0x1ec>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f023 0207 	bic.w	r2, r3, #7
 8001904:	4923      	ldr	r1, [pc, #140]	@ (8001994 <HAL_RCC_ClockConfig+0x1ec>)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	4313      	orrs	r3, r2
 800190a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800190c:	4b21      	ldr	r3, [pc, #132]	@ (8001994 <HAL_RCC_ClockConfig+0x1ec>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	d001      	beq.n	800191e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e036      	b.n	800198c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	2b00      	cmp	r3, #0
 8001928:	d008      	beq.n	800193c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800192a:	4b1b      	ldr	r3, [pc, #108]	@ (8001998 <HAL_RCC_ClockConfig+0x1f0>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	4918      	ldr	r1, [pc, #96]	@ (8001998 <HAL_RCC_ClockConfig+0x1f0>)
 8001938:	4313      	orrs	r3, r2
 800193a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0308 	and.w	r3, r3, #8
 8001944:	2b00      	cmp	r3, #0
 8001946:	d009      	beq.n	800195c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001948:	4b13      	ldr	r3, [pc, #76]	@ (8001998 <HAL_RCC_ClockConfig+0x1f0>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	4910      	ldr	r1, [pc, #64]	@ (8001998 <HAL_RCC_ClockConfig+0x1f0>)
 8001958:	4313      	orrs	r3, r2
 800195a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800195c:	f000 f824 	bl	80019a8 <HAL_RCC_GetSysClockFreq>
 8001960:	4602      	mov	r2, r0
 8001962:	4b0d      	ldr	r3, [pc, #52]	@ (8001998 <HAL_RCC_ClockConfig+0x1f0>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	091b      	lsrs	r3, r3, #4
 8001968:	f003 030f 	and.w	r3, r3, #15
 800196c:	490b      	ldr	r1, [pc, #44]	@ (800199c <HAL_RCC_ClockConfig+0x1f4>)
 800196e:	5ccb      	ldrb	r3, [r1, r3]
 8001970:	f003 031f 	and.w	r3, r3, #31
 8001974:	fa22 f303 	lsr.w	r3, r2, r3
 8001978:	4a09      	ldr	r2, [pc, #36]	@ (80019a0 <HAL_RCC_ClockConfig+0x1f8>)
 800197a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800197c:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <HAL_RCC_ClockConfig+0x1fc>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe feb3 	bl	80006ec <HAL_InitTick>
 8001986:	4603      	mov	r3, r0
 8001988:	72fb      	strb	r3, [r7, #11]

  return status;
 800198a:	7afb      	ldrb	r3, [r7, #11]
}
 800198c:	4618      	mov	r0, r3
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40022000 	.word	0x40022000
 8001998:	40021000 	.word	0x40021000
 800199c:	08003048 	.word	0x08003048
 80019a0:	20000000 	.word	0x20000000
 80019a4:	20000004 	.word	0x20000004

080019a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b089      	sub	sp, #36	@ 0x24
 80019ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
 80019b2:	2300      	movs	r3, #0
 80019b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019b6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 030c 	and.w	r3, r3, #12
 80019be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019c0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	f003 0303 	and.w	r3, r3, #3
 80019c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d005      	beq.n	80019dc <HAL_RCC_GetSysClockFreq+0x34>
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	2b0c      	cmp	r3, #12
 80019d4:	d121      	bne.n	8001a1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d11e      	bne.n	8001a1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80019dc:	4b34      	ldr	r3, [pc, #208]	@ (8001ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0308 	and.w	r3, r3, #8
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d107      	bne.n	80019f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80019e8:	4b31      	ldr	r3, [pc, #196]	@ (8001ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 80019ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019ee:	0a1b      	lsrs	r3, r3, #8
 80019f0:	f003 030f 	and.w	r3, r3, #15
 80019f4:	61fb      	str	r3, [r7, #28]
 80019f6:	e005      	b.n	8001a04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80019f8:	4b2d      	ldr	r3, [pc, #180]	@ (8001ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	091b      	lsrs	r3, r3, #4
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a04:	4a2b      	ldr	r2, [pc, #172]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10d      	bne.n	8001a30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a18:	e00a      	b.n	8001a30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	d102      	bne.n	8001a26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a20:	4b25      	ldr	r3, [pc, #148]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a22:	61bb      	str	r3, [r7, #24]
 8001a24:	e004      	b.n	8001a30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	2b08      	cmp	r3, #8
 8001a2a:	d101      	bne.n	8001a30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a2c:	4b23      	ldr	r3, [pc, #140]	@ (8001abc <HAL_RCC_GetSysClockFreq+0x114>)
 8001a2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	2b0c      	cmp	r3, #12
 8001a34:	d134      	bne.n	8001aa0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a36:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d003      	beq.n	8001a4e <HAL_RCC_GetSysClockFreq+0xa6>
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	2b03      	cmp	r3, #3
 8001a4a:	d003      	beq.n	8001a54 <HAL_RCC_GetSysClockFreq+0xac>
 8001a4c:	e005      	b.n	8001a5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a50:	617b      	str	r3, [r7, #20]
      break;
 8001a52:	e005      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a54:	4b19      	ldr	r3, [pc, #100]	@ (8001abc <HAL_RCC_GetSysClockFreq+0x114>)
 8001a56:	617b      	str	r3, [r7, #20]
      break;
 8001a58:	e002      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	617b      	str	r3, [r7, #20]
      break;
 8001a5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a60:	4b13      	ldr	r3, [pc, #76]	@ (8001ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	091b      	lsrs	r3, r3, #4
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a6e:	4b10      	ldr	r3, [pc, #64]	@ (8001ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	0a1b      	lsrs	r3, r3, #8
 8001a74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	fb03 f202 	mul.w	r2, r3, r2
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a86:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	0e5b      	lsrs	r3, r3, #25
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	3301      	adds	r3, #1
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001aa0:	69bb      	ldr	r3, [r7, #24]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3724      	adds	r7, #36	@ 0x24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	08003058 	.word	0x08003058
 8001ab8:	00f42400 	.word	0x00f42400
 8001abc:	007a1200 	.word	0x007a1200

08001ac0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001acc:	4b2a      	ldr	r3, [pc, #168]	@ (8001b78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d003      	beq.n	8001ae0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ad8:	f7ff fa26 	bl	8000f28 <HAL_PWREx_GetVoltageRange>
 8001adc:	6178      	str	r0, [r7, #20]
 8001ade:	e014      	b.n	8001b0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ae0:	4b25      	ldr	r3, [pc, #148]	@ (8001b78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae4:	4a24      	ldr	r2, [pc, #144]	@ (8001b78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ae6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aea:	6593      	str	r3, [r2, #88]	@ 0x58
 8001aec:	4b22      	ldr	r3, [pc, #136]	@ (8001b78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001af8:	f7ff fa16 	bl	8000f28 <HAL_PWREx_GetVoltageRange>
 8001afc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001afe:	4b1e      	ldr	r3, [pc, #120]	@ (8001b78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b02:	4a1d      	ldr	r2, [pc, #116]	@ (8001b78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b08:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b10:	d10b      	bne.n	8001b2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b80      	cmp	r3, #128	@ 0x80
 8001b16:	d919      	bls.n	8001b4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2ba0      	cmp	r3, #160	@ 0xa0
 8001b1c:	d902      	bls.n	8001b24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b1e:	2302      	movs	r3, #2
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	e013      	b.n	8001b4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b24:	2301      	movs	r3, #1
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	e010      	b.n	8001b4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b80      	cmp	r3, #128	@ 0x80
 8001b2e:	d902      	bls.n	8001b36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001b30:	2303      	movs	r3, #3
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	e00a      	b.n	8001b4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b80      	cmp	r3, #128	@ 0x80
 8001b3a:	d102      	bne.n	8001b42 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	e004      	b.n	8001b4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b70      	cmp	r3, #112	@ 0x70
 8001b46:	d101      	bne.n	8001b4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b48:	2301      	movs	r3, #1
 8001b4a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f023 0207 	bic.w	r2, r3, #7
 8001b54:	4909      	ldr	r1, [pc, #36]	@ (8001b7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b5c:	4b07      	ldr	r3, [pc, #28]	@ (8001b7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d001      	beq.n	8001b6e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40022000 	.word	0x40022000

08001b80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001b88:	2300      	movs	r3, #0
 8001b8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d041      	beq.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ba0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001ba4:	d02a      	beq.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001ba6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001baa:	d824      	bhi.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001bac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001bb0:	d008      	beq.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001bb2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001bb6:	d81e      	bhi.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00a      	beq.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001bbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001bc0:	d010      	beq.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001bc2:	e018      	b.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001bc4:	4b86      	ldr	r3, [pc, #536]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	4a85      	ldr	r2, [pc, #532]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001bca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001bd0:	e015      	b.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 fabb 	bl	8002154 <RCCEx_PLLSAI1_Config>
 8001bde:	4603      	mov	r3, r0
 8001be0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001be2:	e00c      	b.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3320      	adds	r3, #32
 8001be8:	2100      	movs	r1, #0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 fba6 	bl	800233c <RCCEx_PLLSAI2_Config>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001bf4:	e003      	b.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	74fb      	strb	r3, [r7, #19]
      break;
 8001bfa:	e000      	b.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001bfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001bfe:	7cfb      	ldrb	r3, [r7, #19]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10b      	bne.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c04:	4b76      	ldr	r3, [pc, #472]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c0a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c12:	4973      	ldr	r1, [pc, #460]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001c1a:	e001      	b.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c1c:	7cfb      	ldrb	r3, [r7, #19]
 8001c1e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d041      	beq.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c30:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001c34:	d02a      	beq.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001c36:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001c3a:	d824      	bhi.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001c3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001c40:	d008      	beq.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001c42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001c46:	d81e      	bhi.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d00a      	beq.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001c4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c50:	d010      	beq.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001c52:	e018      	b.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001c54:	4b62      	ldr	r3, [pc, #392]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	4a61      	ldr	r2, [pc, #388]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c5e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001c60:	e015      	b.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3304      	adds	r3, #4
 8001c66:	2100      	movs	r1, #0
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f000 fa73 	bl	8002154 <RCCEx_PLLSAI1_Config>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001c72:	e00c      	b.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3320      	adds	r3, #32
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 fb5e 	bl	800233c <RCCEx_PLLSAI2_Config>
 8001c80:	4603      	mov	r3, r0
 8001c82:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001c84:	e003      	b.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	74fb      	strb	r3, [r7, #19]
      break;
 8001c8a:	e000      	b.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001c8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001c8e:	7cfb      	ldrb	r3, [r7, #19]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d10b      	bne.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001c94:	4b52      	ldr	r3, [pc, #328]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c9a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ca2:	494f      	ldr	r1, [pc, #316]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001caa:	e001      	b.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001cac:	7cfb      	ldrb	r3, [r7, #19]
 8001cae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f000 80a0 	beq.w	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001cc2:	4b47      	ldr	r3, [pc, #284]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00d      	beq.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cd8:	4b41      	ldr	r3, [pc, #260]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cdc:	4a40      	ldr	r2, [pc, #256]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ce2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ce4:	4b3e      	ldr	r3, [pc, #248]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cf4:	4b3b      	ldr	r3, [pc, #236]	@ (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a3a      	ldr	r2, [pc, #232]	@ (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001cfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cfe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d00:	f7fe fd44 	bl	800078c <HAL_GetTick>
 8001d04:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001d06:	e009      	b.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d08:	f7fe fd40 	bl	800078c <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d902      	bls.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	74fb      	strb	r3, [r7, #19]
        break;
 8001d1a:	e005      	b.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001d1c:	4b31      	ldr	r3, [pc, #196]	@ (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0ef      	beq.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001d28:	7cfb      	ldrb	r3, [r7, #19]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d15c      	bne.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d2e:	4b2c      	ldr	r3, [pc, #176]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d38:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d01f      	beq.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d019      	beq.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d4c:	4b24      	ldr	r3, [pc, #144]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d58:	4b21      	ldr	r3, [pc, #132]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d5e:	4a20      	ldr	r2, [pc, #128]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d68:	4b1d      	ldr	r3, [pc, #116]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d6e:	4a1c      	ldr	r2, [pc, #112]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d78:	4a19      	ldr	r2, [pc, #100]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d016      	beq.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8a:	f7fe fcff 	bl	800078c <HAL_GetTick>
 8001d8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d90:	e00b      	b.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d92:	f7fe fcfb 	bl	800078c <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d902      	bls.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	74fb      	strb	r3, [r7, #19]
            break;
 8001da8:	e006      	b.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001daa:	4b0d      	ldr	r3, [pc, #52]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0ec      	beq.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001db8:	7cfb      	ldrb	r3, [r7, #19]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10c      	bne.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dbe:	4b08      	ldr	r3, [pc, #32]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dc4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001dce:	4904      	ldr	r1, [pc, #16]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001dd6:	e009      	b.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001dd8:	7cfb      	ldrb	r3, [r7, #19]
 8001dda:	74bb      	strb	r3, [r7, #18]
 8001ddc:	e006      	b.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001dde:	bf00      	nop
 8001de0:	40021000 	.word	0x40021000
 8001de4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001de8:	7cfb      	ldrb	r3, [r7, #19]
 8001dea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dec:	7c7b      	ldrb	r3, [r7, #17]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d105      	bne.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001df2:	4b9e      	ldr	r3, [pc, #632]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df6:	4a9d      	ldr	r2, [pc, #628]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001df8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dfc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00a      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e0a:	4b98      	ldr	r3, [pc, #608]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e10:	f023 0203 	bic.w	r2, r3, #3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e18:	4994      	ldr	r1, [pc, #592]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00a      	beq.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e2c:	4b8f      	ldr	r3, [pc, #572]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e32:	f023 020c 	bic.w	r2, r3, #12
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e3a:	498c      	ldr	r1, [pc, #560]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0304 	and.w	r3, r3, #4
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00a      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e4e:	4b87      	ldr	r3, [pc, #540]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e54:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5c:	4983      	ldr	r1, [pc, #524]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00a      	beq.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e70:	4b7e      	ldr	r3, [pc, #504]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e76:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7e:	497b      	ldr	r1, [pc, #492]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0310 	and.w	r3, r3, #16
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00a      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e92:	4b76      	ldr	r3, [pc, #472]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ea0:	4972      	ldr	r1, [pc, #456]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0320 	and.w	r3, r3, #32
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00a      	beq.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001eb4:	4b6d      	ldr	r3, [pc, #436]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec2:	496a      	ldr	r1, [pc, #424]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00a      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001ed6:	4b65      	ldr	r3, [pc, #404]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001edc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee4:	4961      	ldr	r1, [pc, #388]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00a      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001ef8:	4b5c      	ldr	r3, [pc, #368]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001efe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f06:	4959      	ldr	r1, [pc, #356]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00a      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f1a:	4b54      	ldr	r3, [pc, #336]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f20:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f28:	4950      	ldr	r1, [pc, #320]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00a      	beq.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f3c:	4b4b      	ldr	r3, [pc, #300]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f42:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f4a:	4948      	ldr	r1, [pc, #288]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00a      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f5e:	4b43      	ldr	r3, [pc, #268]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f64:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6c:	493f      	ldr	r1, [pc, #252]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d028      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f80:	4b3a      	ldr	r3, [pc, #232]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f86:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f8e:	4937      	ldr	r1, [pc, #220]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001f9e:	d106      	bne.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fa0:	4b32      	ldr	r3, [pc, #200]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	4a31      	ldr	r2, [pc, #196]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001faa:	60d3      	str	r3, [r2, #12]
 8001fac:	e011      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fb2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001fb6:	d10c      	bne.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3304      	adds	r3, #4
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 f8c8 	bl	8002154 <RCCEx_PLLSAI1_Config>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001fc8:	7cfb      	ldrb	r3, [r7, #19]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8001fce:	7cfb      	ldrb	r3, [r7, #19]
 8001fd0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d028      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001fde:	4b23      	ldr	r3, [pc, #140]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fe4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fec:	491f      	ldr	r1, [pc, #124]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ff8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001ffc:	d106      	bne.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	4a1a      	ldr	r2, [pc, #104]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002004:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002008:	60d3      	str	r3, [r2, #12]
 800200a:	e011      	b.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002010:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002014:	d10c      	bne.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	3304      	adds	r3, #4
 800201a:	2101      	movs	r1, #1
 800201c:	4618      	mov	r0, r3
 800201e:	f000 f899 	bl	8002154 <RCCEx_PLLSAI1_Config>
 8002022:	4603      	mov	r3, r0
 8002024:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002026:	7cfb      	ldrb	r3, [r7, #19]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800202c:	7cfb      	ldrb	r3, [r7, #19]
 800202e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d02b      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800203c:	4b0b      	ldr	r3, [pc, #44]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800203e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002042:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800204a:	4908      	ldr	r1, [pc, #32]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800204c:	4313      	orrs	r3, r2
 800204e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002056:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800205a:	d109      	bne.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800205c:	4b03      	ldr	r3, [pc, #12]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	4a02      	ldr	r2, [pc, #8]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002062:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002066:	60d3      	str	r3, [r2, #12]
 8002068:	e014      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800206a:	bf00      	nop
 800206c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002074:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002078:	d10c      	bne.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3304      	adds	r3, #4
 800207e:	2101      	movs	r1, #1
 8002080:	4618      	mov	r0, r3
 8002082:	f000 f867 	bl	8002154 <RCCEx_PLLSAI1_Config>
 8002086:	4603      	mov	r3, r0
 8002088:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800208a:	7cfb      	ldrb	r3, [r7, #19]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002090:	7cfb      	ldrb	r3, [r7, #19]
 8002092:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d02f      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80020a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80020a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020a6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80020ae:	4928      	ldr	r1, [pc, #160]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80020ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80020be:	d10d      	bne.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3304      	adds	r3, #4
 80020c4:	2102      	movs	r1, #2
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 f844 	bl	8002154 <RCCEx_PLLSAI1_Config>
 80020cc:	4603      	mov	r3, r0
 80020ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80020d0:	7cfb      	ldrb	r3, [r7, #19]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d014      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80020d6:	7cfb      	ldrb	r3, [r7, #19]
 80020d8:	74bb      	strb	r3, [r7, #18]
 80020da:	e011      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80020e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80020e4:	d10c      	bne.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3320      	adds	r3, #32
 80020ea:	2102      	movs	r1, #2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f000 f925 	bl	800233c <RCCEx_PLLSAI2_Config>
 80020f2:	4603      	mov	r3, r0
 80020f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80020f6:	7cfb      	ldrb	r3, [r7, #19]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80020fc:	7cfb      	ldrb	r3, [r7, #19]
 80020fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00a      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800210c:	4b10      	ldr	r3, [pc, #64]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800210e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002112:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800211a:	490d      	ldr	r1, [pc, #52]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800211c:	4313      	orrs	r3, r2
 800211e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00b      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800212e:	4b08      	ldr	r3, [pc, #32]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002134:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800213e:	4904      	ldr	r1, [pc, #16]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002140:	4313      	orrs	r3, r2
 8002142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002146:	7cbb      	ldrb	r3, [r7, #18]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40021000 	.word	0x40021000

08002154 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002162:	4b75      	ldr	r3, [pc, #468]	@ (8002338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d018      	beq.n	80021a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800216e:	4b72      	ldr	r3, [pc, #456]	@ (8002338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	f003 0203 	and.w	r2, r3, #3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	429a      	cmp	r2, r3
 800217c:	d10d      	bne.n	800219a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
       ||
 8002182:	2b00      	cmp	r3, #0
 8002184:	d009      	beq.n	800219a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002186:	4b6c      	ldr	r3, [pc, #432]	@ (8002338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	091b      	lsrs	r3, r3, #4
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	1c5a      	adds	r2, r3, #1
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
       ||
 8002196:	429a      	cmp	r2, r3
 8002198:	d047      	beq.n	800222a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	73fb      	strb	r3, [r7, #15]
 800219e:	e044      	b.n	800222a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d018      	beq.n	80021da <RCCEx_PLLSAI1_Config+0x86>
 80021a8:	2b03      	cmp	r3, #3
 80021aa:	d825      	bhi.n	80021f8 <RCCEx_PLLSAI1_Config+0xa4>
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d002      	beq.n	80021b6 <RCCEx_PLLSAI1_Config+0x62>
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d009      	beq.n	80021c8 <RCCEx_PLLSAI1_Config+0x74>
 80021b4:	e020      	b.n	80021f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80021b6:	4b60      	ldr	r3, [pc, #384]	@ (8002338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d11d      	bne.n	80021fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021c6:	e01a      	b.n	80021fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80021c8:	4b5b      	ldr	r3, [pc, #364]	@ (8002338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d116      	bne.n	8002202 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021d8:	e013      	b.n	8002202 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80021da:	4b57      	ldr	r3, [pc, #348]	@ (8002338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10f      	bne.n	8002206 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80021e6:	4b54      	ldr	r3, [pc, #336]	@ (8002338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d109      	bne.n	8002206 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80021f6:	e006      	b.n	8002206 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	73fb      	strb	r3, [r7, #15]
      break;
 80021fc:	e004      	b.n	8002208 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80021fe:	bf00      	nop
 8002200:	e002      	b.n	8002208 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002202:	bf00      	nop
 8002204:	e000      	b.n	8002208 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002206:	bf00      	nop
    }

    if(status == HAL_OK)
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10d      	bne.n	800222a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800220e:	4b4a      	ldr	r3, [pc, #296]	@ (8002338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6819      	ldr	r1, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	3b01      	subs	r3, #1
 8002220:	011b      	lsls	r3, r3, #4
 8002222:	430b      	orrs	r3, r1
 8002224:	4944      	ldr	r1, [pc, #272]	@ (8002338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002226:	4313      	orrs	r3, r2
 8002228:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d17d      	bne.n	800232c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002230:	4b41      	ldr	r3, [pc, #260]	@ (8002338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a40      	ldr	r2, [pc, #256]	@ (8002338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002236:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800223a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800223c:	f7fe faa6 	bl	800078c <HAL_GetTick>
 8002240:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002242:	e009      	b.n	8002258 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002244:	f7fe faa2 	bl	800078c <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d902      	bls.n	8002258 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	73fb      	strb	r3, [r7, #15]
        break;
 8002256:	e005      	b.n	8002264 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002258:	4b37      	ldr	r3, [pc, #220]	@ (8002338 <RCCEx_PLLSAI1_Config+0x1e4>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1ef      	bne.n	8002244 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d160      	bne.n	800232c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d111      	bne.n	8002294 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002270:	4b31      	ldr	r3, [pc, #196]	@ (8002338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002278:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6892      	ldr	r2, [r2, #8]
 8002280:	0211      	lsls	r1, r2, #8
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	68d2      	ldr	r2, [r2, #12]
 8002286:	0912      	lsrs	r2, r2, #4
 8002288:	0452      	lsls	r2, r2, #17
 800228a:	430a      	orrs	r2, r1
 800228c:	492a      	ldr	r1, [pc, #168]	@ (8002338 <RCCEx_PLLSAI1_Config+0x1e4>)
 800228e:	4313      	orrs	r3, r2
 8002290:	610b      	str	r3, [r1, #16]
 8002292:	e027      	b.n	80022e4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d112      	bne.n	80022c0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800229a:	4b27      	ldr	r3, [pc, #156]	@ (8002338 <RCCEx_PLLSAI1_Config+0x1e4>)
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80022a2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6892      	ldr	r2, [r2, #8]
 80022aa:	0211      	lsls	r1, r2, #8
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6912      	ldr	r2, [r2, #16]
 80022b0:	0852      	lsrs	r2, r2, #1
 80022b2:	3a01      	subs	r2, #1
 80022b4:	0552      	lsls	r2, r2, #21
 80022b6:	430a      	orrs	r2, r1
 80022b8:	491f      	ldr	r1, [pc, #124]	@ (8002338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	610b      	str	r3, [r1, #16]
 80022be:	e011      	b.n	80022e4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80022c8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6892      	ldr	r2, [r2, #8]
 80022d0:	0211      	lsls	r1, r2, #8
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6952      	ldr	r2, [r2, #20]
 80022d6:	0852      	lsrs	r2, r2, #1
 80022d8:	3a01      	subs	r2, #1
 80022da:	0652      	lsls	r2, r2, #25
 80022dc:	430a      	orrs	r2, r1
 80022de:	4916      	ldr	r1, [pc, #88]	@ (8002338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80022e4:	4b14      	ldr	r3, [pc, #80]	@ (8002338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a13      	ldr	r2, [pc, #76]	@ (8002338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80022ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f0:	f7fe fa4c 	bl	800078c <HAL_GetTick>
 80022f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80022f6:	e009      	b.n	800230c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80022f8:	f7fe fa48 	bl	800078c <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d902      	bls.n	800230c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	73fb      	strb	r3, [r7, #15]
          break;
 800230a:	e005      	b.n	8002318 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800230c:	4b0a      	ldr	r3, [pc, #40]	@ (8002338 <RCCEx_PLLSAI1_Config+0x1e4>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0ef      	beq.n	80022f8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002318:	7bfb      	ldrb	r3, [r7, #15]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d106      	bne.n	800232c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800231e:	4b06      	ldr	r3, [pc, #24]	@ (8002338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	4904      	ldr	r1, [pc, #16]	@ (8002338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002328:	4313      	orrs	r3, r2
 800232a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800232c:	7bfb      	ldrb	r3, [r7, #15]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40021000 	.word	0x40021000

0800233c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800234a:	4b6a      	ldr	r3, [pc, #424]	@ (80024f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d018      	beq.n	8002388 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002356:	4b67      	ldr	r3, [pc, #412]	@ (80024f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f003 0203 	and.w	r2, r3, #3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d10d      	bne.n	8002382 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
       ||
 800236a:	2b00      	cmp	r3, #0
 800236c:	d009      	beq.n	8002382 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800236e:	4b61      	ldr	r3, [pc, #388]	@ (80024f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	091b      	lsrs	r3, r3, #4
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
       ||
 800237e:	429a      	cmp	r2, r3
 8002380:	d047      	beq.n	8002412 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	73fb      	strb	r3, [r7, #15]
 8002386:	e044      	b.n	8002412 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b03      	cmp	r3, #3
 800238e:	d018      	beq.n	80023c2 <RCCEx_PLLSAI2_Config+0x86>
 8002390:	2b03      	cmp	r3, #3
 8002392:	d825      	bhi.n	80023e0 <RCCEx_PLLSAI2_Config+0xa4>
 8002394:	2b01      	cmp	r3, #1
 8002396:	d002      	beq.n	800239e <RCCEx_PLLSAI2_Config+0x62>
 8002398:	2b02      	cmp	r3, #2
 800239a:	d009      	beq.n	80023b0 <RCCEx_PLLSAI2_Config+0x74>
 800239c:	e020      	b.n	80023e0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800239e:	4b55      	ldr	r3, [pc, #340]	@ (80024f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d11d      	bne.n	80023e6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ae:	e01a      	b.n	80023e6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023b0:	4b50      	ldr	r3, [pc, #320]	@ (80024f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d116      	bne.n	80023ea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023c0:	e013      	b.n	80023ea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023c2:	4b4c      	ldr	r3, [pc, #304]	@ (80024f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10f      	bne.n	80023ee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023ce:	4b49      	ldr	r3, [pc, #292]	@ (80024f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d109      	bne.n	80023ee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80023de:	e006      	b.n	80023ee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	73fb      	strb	r3, [r7, #15]
      break;
 80023e4:	e004      	b.n	80023f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80023e6:	bf00      	nop
 80023e8:	e002      	b.n	80023f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80023ea:	bf00      	nop
 80023ec:	e000      	b.n	80023f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80023ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10d      	bne.n	8002412 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023f6:	4b3f      	ldr	r3, [pc, #252]	@ (80024f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6819      	ldr	r1, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	3b01      	subs	r3, #1
 8002408:	011b      	lsls	r3, r3, #4
 800240a:	430b      	orrs	r3, r1
 800240c:	4939      	ldr	r1, [pc, #228]	@ (80024f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800240e:	4313      	orrs	r3, r2
 8002410:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002412:	7bfb      	ldrb	r3, [r7, #15]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d167      	bne.n	80024e8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002418:	4b36      	ldr	r3, [pc, #216]	@ (80024f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a35      	ldr	r2, [pc, #212]	@ (80024f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800241e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002422:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002424:	f7fe f9b2 	bl	800078c <HAL_GetTick>
 8002428:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800242a:	e009      	b.n	8002440 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800242c:	f7fe f9ae 	bl	800078c <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d902      	bls.n	8002440 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	73fb      	strb	r3, [r7, #15]
        break;
 800243e:	e005      	b.n	800244c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002440:	4b2c      	ldr	r3, [pc, #176]	@ (80024f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1ef      	bne.n	800242c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800244c:	7bfb      	ldrb	r3, [r7, #15]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d14a      	bne.n	80024e8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d111      	bne.n	800247c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002458:	4b26      	ldr	r3, [pc, #152]	@ (80024f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002460:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6892      	ldr	r2, [r2, #8]
 8002468:	0211      	lsls	r1, r2, #8
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	68d2      	ldr	r2, [r2, #12]
 800246e:	0912      	lsrs	r2, r2, #4
 8002470:	0452      	lsls	r2, r2, #17
 8002472:	430a      	orrs	r2, r1
 8002474:	491f      	ldr	r1, [pc, #124]	@ (80024f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002476:	4313      	orrs	r3, r2
 8002478:	614b      	str	r3, [r1, #20]
 800247a:	e011      	b.n	80024a0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800247c:	4b1d      	ldr	r3, [pc, #116]	@ (80024f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002484:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6892      	ldr	r2, [r2, #8]
 800248c:	0211      	lsls	r1, r2, #8
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6912      	ldr	r2, [r2, #16]
 8002492:	0852      	lsrs	r2, r2, #1
 8002494:	3a01      	subs	r2, #1
 8002496:	0652      	lsls	r2, r2, #25
 8002498:	430a      	orrs	r2, r1
 800249a:	4916      	ldr	r1, [pc, #88]	@ (80024f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800249c:	4313      	orrs	r3, r2
 800249e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80024a0:	4b14      	ldr	r3, [pc, #80]	@ (80024f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a13      	ldr	r2, [pc, #76]	@ (80024f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ac:	f7fe f96e 	bl	800078c <HAL_GetTick>
 80024b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80024b2:	e009      	b.n	80024c8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80024b4:	f7fe f96a 	bl	800078c <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d902      	bls.n	80024c8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	73fb      	strb	r3, [r7, #15]
          break;
 80024c6:	e005      	b.n	80024d4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80024c8:	4b0a      	ldr	r3, [pc, #40]	@ (80024f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0ef      	beq.n	80024b4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d106      	bne.n	80024e8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80024da:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024dc:	695a      	ldr	r2, [r3, #20]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	4904      	ldr	r1, [pc, #16]	@ (80024f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40021000 	.word	0x40021000

080024f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e049      	b.n	800259e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d106      	bne.n	8002524 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7fe f80e 	bl	8000540 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2202      	movs	r2, #2
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3304      	adds	r3, #4
 8002534:	4619      	mov	r1, r3
 8002536:	4610      	mov	r0, r2
 8002538:	f000 f94a 	bl	80027d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d101      	bne.n	80025c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80025c2:	2302      	movs	r3, #2
 80025c4:	e0ff      	b.n	80027c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b14      	cmp	r3, #20
 80025d2:	f200 80f0 	bhi.w	80027b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80025d6:	a201      	add	r2, pc, #4	@ (adr r2, 80025dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80025d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025dc:	08002631 	.word	0x08002631
 80025e0:	080027b7 	.word	0x080027b7
 80025e4:	080027b7 	.word	0x080027b7
 80025e8:	080027b7 	.word	0x080027b7
 80025ec:	08002671 	.word	0x08002671
 80025f0:	080027b7 	.word	0x080027b7
 80025f4:	080027b7 	.word	0x080027b7
 80025f8:	080027b7 	.word	0x080027b7
 80025fc:	080026b3 	.word	0x080026b3
 8002600:	080027b7 	.word	0x080027b7
 8002604:	080027b7 	.word	0x080027b7
 8002608:	080027b7 	.word	0x080027b7
 800260c:	080026f3 	.word	0x080026f3
 8002610:	080027b7 	.word	0x080027b7
 8002614:	080027b7 	.word	0x080027b7
 8002618:	080027b7 	.word	0x080027b7
 800261c:	08002735 	.word	0x08002735
 8002620:	080027b7 	.word	0x080027b7
 8002624:	080027b7 	.word	0x080027b7
 8002628:	080027b7 	.word	0x080027b7
 800262c:	08002775 	.word	0x08002775
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68b9      	ldr	r1, [r7, #8]
 8002636:	4618      	mov	r0, r3
 8002638:	f000 f970 	bl	800291c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	699a      	ldr	r2, [r3, #24]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0208 	orr.w	r2, r2, #8
 800264a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699a      	ldr	r2, [r3, #24]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 0204 	bic.w	r2, r2, #4
 800265a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6999      	ldr	r1, [r3, #24]
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	691a      	ldr	r2, [r3, #16]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	619a      	str	r2, [r3, #24]
      break;
 800266e:	e0a5      	b.n	80027bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68b9      	ldr	r1, [r7, #8]
 8002676:	4618      	mov	r0, r3
 8002678:	f000 f9e0 	bl	8002a3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	699a      	ldr	r2, [r3, #24]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800268a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699a      	ldr	r2, [r3, #24]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800269a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6999      	ldr	r1, [r3, #24]
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	021a      	lsls	r2, r3, #8
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	619a      	str	r2, [r3, #24]
      break;
 80026b0:	e084      	b.n	80027bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68b9      	ldr	r1, [r7, #8]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 fa49 	bl	8002b50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	69da      	ldr	r2, [r3, #28]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f042 0208 	orr.w	r2, r2, #8
 80026cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	69da      	ldr	r2, [r3, #28]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0204 	bic.w	r2, r2, #4
 80026dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	69d9      	ldr	r1, [r3, #28]
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	691a      	ldr	r2, [r3, #16]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	61da      	str	r2, [r3, #28]
      break;
 80026f0:	e064      	b.n	80027bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68b9      	ldr	r1, [r7, #8]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 fab1 	bl	8002c60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	69da      	ldr	r2, [r3, #28]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800270c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	69da      	ldr	r2, [r3, #28]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800271c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	69d9      	ldr	r1, [r3, #28]
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	021a      	lsls	r2, r3, #8
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	61da      	str	r2, [r3, #28]
      break;
 8002732:	e043      	b.n	80027bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68b9      	ldr	r1, [r7, #8]
 800273a:	4618      	mov	r0, r3
 800273c:	f000 fafa 	bl	8002d34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0208 	orr.w	r2, r2, #8
 800274e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0204 	bic.w	r2, r2, #4
 800275e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	691a      	ldr	r2, [r3, #16]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002772:	e023      	b.n	80027bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68b9      	ldr	r1, [r7, #8]
 800277a:	4618      	mov	r0, r3
 800277c:	f000 fb3e 	bl	8002dfc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800278e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800279e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	021a      	lsls	r2, r3, #8
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80027b4:	e002      	b.n	80027bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	75fb      	strb	r3, [r7, #23]
      break;
 80027ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80027c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop

080027d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a46      	ldr	r2, [pc, #280]	@ (80028fc <TIM_Base_SetConfig+0x12c>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d013      	beq.n	8002810 <TIM_Base_SetConfig+0x40>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027ee:	d00f      	beq.n	8002810 <TIM_Base_SetConfig+0x40>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a43      	ldr	r2, [pc, #268]	@ (8002900 <TIM_Base_SetConfig+0x130>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d00b      	beq.n	8002810 <TIM_Base_SetConfig+0x40>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a42      	ldr	r2, [pc, #264]	@ (8002904 <TIM_Base_SetConfig+0x134>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d007      	beq.n	8002810 <TIM_Base_SetConfig+0x40>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a41      	ldr	r2, [pc, #260]	@ (8002908 <TIM_Base_SetConfig+0x138>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d003      	beq.n	8002810 <TIM_Base_SetConfig+0x40>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a40      	ldr	r2, [pc, #256]	@ (800290c <TIM_Base_SetConfig+0x13c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d108      	bne.n	8002822 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002816:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	4313      	orrs	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a35      	ldr	r2, [pc, #212]	@ (80028fc <TIM_Base_SetConfig+0x12c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d01f      	beq.n	800286a <TIM_Base_SetConfig+0x9a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002830:	d01b      	beq.n	800286a <TIM_Base_SetConfig+0x9a>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a32      	ldr	r2, [pc, #200]	@ (8002900 <TIM_Base_SetConfig+0x130>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d017      	beq.n	800286a <TIM_Base_SetConfig+0x9a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a31      	ldr	r2, [pc, #196]	@ (8002904 <TIM_Base_SetConfig+0x134>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d013      	beq.n	800286a <TIM_Base_SetConfig+0x9a>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a30      	ldr	r2, [pc, #192]	@ (8002908 <TIM_Base_SetConfig+0x138>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d00f      	beq.n	800286a <TIM_Base_SetConfig+0x9a>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a2f      	ldr	r2, [pc, #188]	@ (800290c <TIM_Base_SetConfig+0x13c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d00b      	beq.n	800286a <TIM_Base_SetConfig+0x9a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a2e      	ldr	r2, [pc, #184]	@ (8002910 <TIM_Base_SetConfig+0x140>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d007      	beq.n	800286a <TIM_Base_SetConfig+0x9a>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a2d      	ldr	r2, [pc, #180]	@ (8002914 <TIM_Base_SetConfig+0x144>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d003      	beq.n	800286a <TIM_Base_SetConfig+0x9a>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a2c      	ldr	r2, [pc, #176]	@ (8002918 <TIM_Base_SetConfig+0x148>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d108      	bne.n	800287c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002870:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	4313      	orrs	r3, r2
 800287a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	4313      	orrs	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a16      	ldr	r2, [pc, #88]	@ (80028fc <TIM_Base_SetConfig+0x12c>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d00f      	beq.n	80028c8 <TIM_Base_SetConfig+0xf8>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a18      	ldr	r2, [pc, #96]	@ (800290c <TIM_Base_SetConfig+0x13c>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d00b      	beq.n	80028c8 <TIM_Base_SetConfig+0xf8>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a17      	ldr	r2, [pc, #92]	@ (8002910 <TIM_Base_SetConfig+0x140>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d007      	beq.n	80028c8 <TIM_Base_SetConfig+0xf8>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a16      	ldr	r2, [pc, #88]	@ (8002914 <TIM_Base_SetConfig+0x144>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d003      	beq.n	80028c8 <TIM_Base_SetConfig+0xf8>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a15      	ldr	r2, [pc, #84]	@ (8002918 <TIM_Base_SetConfig+0x148>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d103      	bne.n	80028d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	691a      	ldr	r2, [r3, #16]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d105      	bne.n	80028ee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	f023 0201 	bic.w	r2, r3, #1
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	611a      	str	r2, [r3, #16]
  }
}
 80028ee:	bf00      	nop
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	40012c00 	.word	0x40012c00
 8002900:	40000400 	.word	0x40000400
 8002904:	40000800 	.word	0x40000800
 8002908:	40000c00 	.word	0x40000c00
 800290c:	40013400 	.word	0x40013400
 8002910:	40014000 	.word	0x40014000
 8002914:	40014400 	.word	0x40014400
 8002918:	40014800 	.word	0x40014800

0800291c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800291c:	b480      	push	{r7}
 800291e:	b087      	sub	sp, #28
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	f023 0201 	bic.w	r2, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800294a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800294e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f023 0303 	bic.w	r3, r3, #3
 8002956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	4313      	orrs	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f023 0302 	bic.w	r3, r3, #2
 8002968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4313      	orrs	r3, r2
 8002972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a2c      	ldr	r2, [pc, #176]	@ (8002a28 <TIM_OC1_SetConfig+0x10c>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d00f      	beq.n	800299c <TIM_OC1_SetConfig+0x80>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a2b      	ldr	r2, [pc, #172]	@ (8002a2c <TIM_OC1_SetConfig+0x110>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d00b      	beq.n	800299c <TIM_OC1_SetConfig+0x80>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a2a      	ldr	r2, [pc, #168]	@ (8002a30 <TIM_OC1_SetConfig+0x114>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d007      	beq.n	800299c <TIM_OC1_SetConfig+0x80>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a29      	ldr	r2, [pc, #164]	@ (8002a34 <TIM_OC1_SetConfig+0x118>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d003      	beq.n	800299c <TIM_OC1_SetConfig+0x80>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a28      	ldr	r2, [pc, #160]	@ (8002a38 <TIM_OC1_SetConfig+0x11c>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d10c      	bne.n	80029b6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	f023 0308 	bic.w	r3, r3, #8
 80029a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f023 0304 	bic.w	r3, r3, #4
 80029b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002a28 <TIM_OC1_SetConfig+0x10c>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d00f      	beq.n	80029de <TIM_OC1_SetConfig+0xc2>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a1a      	ldr	r2, [pc, #104]	@ (8002a2c <TIM_OC1_SetConfig+0x110>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d00b      	beq.n	80029de <TIM_OC1_SetConfig+0xc2>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a19      	ldr	r2, [pc, #100]	@ (8002a30 <TIM_OC1_SetConfig+0x114>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d007      	beq.n	80029de <TIM_OC1_SetConfig+0xc2>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a18      	ldr	r2, [pc, #96]	@ (8002a34 <TIM_OC1_SetConfig+0x118>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d003      	beq.n	80029de <TIM_OC1_SetConfig+0xc2>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a17      	ldr	r2, [pc, #92]	@ (8002a38 <TIM_OC1_SetConfig+0x11c>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d111      	bne.n	8002a02 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80029ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	621a      	str	r2, [r3, #32]
}
 8002a1c:	bf00      	nop
 8002a1e:	371c      	adds	r7, #28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	40012c00 	.word	0x40012c00
 8002a2c:	40013400 	.word	0x40013400
 8002a30:	40014000 	.word	0x40014000
 8002a34:	40014400 	.word	0x40014400
 8002a38:	40014800 	.word	0x40014800

08002a3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	f023 0210 	bic.w	r2, r3, #16
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	021b      	lsls	r3, r3, #8
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	f023 0320 	bic.w	r3, r3, #32
 8002a8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	011b      	lsls	r3, r3, #4
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a28      	ldr	r2, [pc, #160]	@ (8002b3c <TIM_OC2_SetConfig+0x100>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d003      	beq.n	8002aa8 <TIM_OC2_SetConfig+0x6c>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a27      	ldr	r2, [pc, #156]	@ (8002b40 <TIM_OC2_SetConfig+0x104>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d10d      	bne.n	8002ac4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002aae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ac2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a1d      	ldr	r2, [pc, #116]	@ (8002b3c <TIM_OC2_SetConfig+0x100>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d00f      	beq.n	8002aec <TIM_OC2_SetConfig+0xb0>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a1c      	ldr	r2, [pc, #112]	@ (8002b40 <TIM_OC2_SetConfig+0x104>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d00b      	beq.n	8002aec <TIM_OC2_SetConfig+0xb0>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a1b      	ldr	r2, [pc, #108]	@ (8002b44 <TIM_OC2_SetConfig+0x108>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d007      	beq.n	8002aec <TIM_OC2_SetConfig+0xb0>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a1a      	ldr	r2, [pc, #104]	@ (8002b48 <TIM_OC2_SetConfig+0x10c>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d003      	beq.n	8002aec <TIM_OC2_SetConfig+0xb0>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a19      	ldr	r2, [pc, #100]	@ (8002b4c <TIM_OC2_SetConfig+0x110>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d113      	bne.n	8002b14 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002af2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002afa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	621a      	str	r2, [r3, #32]
}
 8002b2e:	bf00      	nop
 8002b30:	371c      	adds	r7, #28
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	40012c00 	.word	0x40012c00
 8002b40:	40013400 	.word	0x40013400
 8002b44:	40014000 	.word	0x40014000
 8002b48:	40014400 	.word	0x40014400
 8002b4c:	40014800 	.word	0x40014800

08002b50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f023 0303 	bic.w	r3, r3, #3
 8002b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	021b      	lsls	r3, r3, #8
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a27      	ldr	r2, [pc, #156]	@ (8002c4c <TIM_OC3_SetConfig+0xfc>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d003      	beq.n	8002bba <TIM_OC3_SetConfig+0x6a>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a26      	ldr	r2, [pc, #152]	@ (8002c50 <TIM_OC3_SetConfig+0x100>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d10d      	bne.n	8002bd6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002bc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	021b      	lsls	r3, r3, #8
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002bd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a1c      	ldr	r2, [pc, #112]	@ (8002c4c <TIM_OC3_SetConfig+0xfc>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00f      	beq.n	8002bfe <TIM_OC3_SetConfig+0xae>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a1b      	ldr	r2, [pc, #108]	@ (8002c50 <TIM_OC3_SetConfig+0x100>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00b      	beq.n	8002bfe <TIM_OC3_SetConfig+0xae>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a1a      	ldr	r2, [pc, #104]	@ (8002c54 <TIM_OC3_SetConfig+0x104>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d007      	beq.n	8002bfe <TIM_OC3_SetConfig+0xae>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a19      	ldr	r2, [pc, #100]	@ (8002c58 <TIM_OC3_SetConfig+0x108>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d003      	beq.n	8002bfe <TIM_OC3_SetConfig+0xae>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a18      	ldr	r2, [pc, #96]	@ (8002c5c <TIM_OC3_SetConfig+0x10c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d113      	bne.n	8002c26 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	011b      	lsls	r3, r3, #4
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	621a      	str	r2, [r3, #32]
}
 8002c40:	bf00      	nop
 8002c42:	371c      	adds	r7, #28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	40012c00 	.word	0x40012c00
 8002c50:	40013400 	.word	0x40013400
 8002c54:	40014000 	.word	0x40014000
 8002c58:	40014400 	.word	0x40014400
 8002c5c:	40014800 	.word	0x40014800

08002c60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	021b      	lsls	r3, r3, #8
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002cae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	031b      	lsls	r3, r3, #12
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a18      	ldr	r2, [pc, #96]	@ (8002d20 <TIM_OC4_SetConfig+0xc0>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d00f      	beq.n	8002ce4 <TIM_OC4_SetConfig+0x84>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a17      	ldr	r2, [pc, #92]	@ (8002d24 <TIM_OC4_SetConfig+0xc4>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d00b      	beq.n	8002ce4 <TIM_OC4_SetConfig+0x84>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a16      	ldr	r2, [pc, #88]	@ (8002d28 <TIM_OC4_SetConfig+0xc8>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d007      	beq.n	8002ce4 <TIM_OC4_SetConfig+0x84>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a15      	ldr	r2, [pc, #84]	@ (8002d2c <TIM_OC4_SetConfig+0xcc>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d003      	beq.n	8002ce4 <TIM_OC4_SetConfig+0x84>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a14      	ldr	r2, [pc, #80]	@ (8002d30 <TIM_OC4_SetConfig+0xd0>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d109      	bne.n	8002cf8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002cea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	019b      	lsls	r3, r3, #6
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	621a      	str	r2, [r3, #32]
}
 8002d12:	bf00      	nop
 8002d14:	371c      	adds	r7, #28
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	40012c00 	.word	0x40012c00
 8002d24:	40013400 	.word	0x40013400
 8002d28:	40014000 	.word	0x40014000
 8002d2c:	40014400 	.word	0x40014400
 8002d30:	40014800 	.word	0x40014800

08002d34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b087      	sub	sp, #28
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002d78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	041b      	lsls	r3, r3, #16
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a17      	ldr	r2, [pc, #92]	@ (8002de8 <TIM_OC5_SetConfig+0xb4>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d00f      	beq.n	8002dae <TIM_OC5_SetConfig+0x7a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a16      	ldr	r2, [pc, #88]	@ (8002dec <TIM_OC5_SetConfig+0xb8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d00b      	beq.n	8002dae <TIM_OC5_SetConfig+0x7a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a15      	ldr	r2, [pc, #84]	@ (8002df0 <TIM_OC5_SetConfig+0xbc>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d007      	beq.n	8002dae <TIM_OC5_SetConfig+0x7a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a14      	ldr	r2, [pc, #80]	@ (8002df4 <TIM_OC5_SetConfig+0xc0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d003      	beq.n	8002dae <TIM_OC5_SetConfig+0x7a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a13      	ldr	r2, [pc, #76]	@ (8002df8 <TIM_OC5_SetConfig+0xc4>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d109      	bne.n	8002dc2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002db4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	021b      	lsls	r3, r3, #8
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	621a      	str	r2, [r3, #32]
}
 8002ddc:	bf00      	nop
 8002dde:	371c      	adds	r7, #28
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	40012c00 	.word	0x40012c00
 8002dec:	40013400 	.word	0x40013400
 8002df0:	40014000 	.word	0x40014000
 8002df4:	40014400 	.word	0x40014400
 8002df8:	40014800 	.word	0x40014800

08002dfc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b087      	sub	sp, #28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	021b      	lsls	r3, r3, #8
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002e42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	051b      	lsls	r3, r3, #20
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a18      	ldr	r2, [pc, #96]	@ (8002eb4 <TIM_OC6_SetConfig+0xb8>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d00f      	beq.n	8002e78 <TIM_OC6_SetConfig+0x7c>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a17      	ldr	r2, [pc, #92]	@ (8002eb8 <TIM_OC6_SetConfig+0xbc>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d00b      	beq.n	8002e78 <TIM_OC6_SetConfig+0x7c>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a16      	ldr	r2, [pc, #88]	@ (8002ebc <TIM_OC6_SetConfig+0xc0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d007      	beq.n	8002e78 <TIM_OC6_SetConfig+0x7c>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a15      	ldr	r2, [pc, #84]	@ (8002ec0 <TIM_OC6_SetConfig+0xc4>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d003      	beq.n	8002e78 <TIM_OC6_SetConfig+0x7c>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a14      	ldr	r2, [pc, #80]	@ (8002ec4 <TIM_OC6_SetConfig+0xc8>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d109      	bne.n	8002e8c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	029b      	lsls	r3, r3, #10
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	621a      	str	r2, [r3, #32]
}
 8002ea6:	bf00      	nop
 8002ea8:	371c      	adds	r7, #28
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40012c00 	.word	0x40012c00
 8002eb8:	40013400 	.word	0x40013400
 8002ebc:	40014000 	.word	0x40014000
 8002ec0:	40014400 	.word	0x40014400
 8002ec4:	40014800 	.word	0x40014800

08002ec8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d101      	bne.n	8002ee0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002edc:	2302      	movs	r3, #2
 8002ede:	e068      	b.n	8002fb2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a2e      	ldr	r2, [pc, #184]	@ (8002fc0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d004      	beq.n	8002f14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a2d      	ldr	r2, [pc, #180]	@ (8002fc4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d108      	bne.n	8002f26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002f1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a1e      	ldr	r2, [pc, #120]	@ (8002fc0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d01d      	beq.n	8002f86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f52:	d018      	beq.n	8002f86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a1b      	ldr	r2, [pc, #108]	@ (8002fc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d013      	beq.n	8002f86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a1a      	ldr	r2, [pc, #104]	@ (8002fcc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d00e      	beq.n	8002f86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a18      	ldr	r2, [pc, #96]	@ (8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d009      	beq.n	8002f86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a13      	ldr	r2, [pc, #76]	@ (8002fc4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d004      	beq.n	8002f86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a14      	ldr	r2, [pc, #80]	@ (8002fd4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d10c      	bne.n	8002fa0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	40012c00 	.word	0x40012c00
 8002fc4:	40013400 	.word	0x40013400
 8002fc8:	40000400 	.word	0x40000400
 8002fcc:	40000800 	.word	0x40000800
 8002fd0:	40000c00 	.word	0x40000c00
 8002fd4:	40014000 	.word	0x40014000

08002fd8 <memset>:
 8002fd8:	4402      	add	r2, r0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d100      	bne.n	8002fe2 <memset+0xa>
 8002fe0:	4770      	bx	lr
 8002fe2:	f803 1b01 	strb.w	r1, [r3], #1
 8002fe6:	e7f9      	b.n	8002fdc <memset+0x4>

08002fe8 <__libc_init_array>:
 8002fe8:	b570      	push	{r4, r5, r6, lr}
 8002fea:	4d0d      	ldr	r5, [pc, #52]	@ (8003020 <__libc_init_array+0x38>)
 8002fec:	4c0d      	ldr	r4, [pc, #52]	@ (8003024 <__libc_init_array+0x3c>)
 8002fee:	1b64      	subs	r4, r4, r5
 8002ff0:	10a4      	asrs	r4, r4, #2
 8002ff2:	2600      	movs	r6, #0
 8002ff4:	42a6      	cmp	r6, r4
 8002ff6:	d109      	bne.n	800300c <__libc_init_array+0x24>
 8002ff8:	4d0b      	ldr	r5, [pc, #44]	@ (8003028 <__libc_init_array+0x40>)
 8002ffa:	4c0c      	ldr	r4, [pc, #48]	@ (800302c <__libc_init_array+0x44>)
 8002ffc:	f000 f818 	bl	8003030 <_init>
 8003000:	1b64      	subs	r4, r4, r5
 8003002:	10a4      	asrs	r4, r4, #2
 8003004:	2600      	movs	r6, #0
 8003006:	42a6      	cmp	r6, r4
 8003008:	d105      	bne.n	8003016 <__libc_init_array+0x2e>
 800300a:	bd70      	pop	{r4, r5, r6, pc}
 800300c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003010:	4798      	blx	r3
 8003012:	3601      	adds	r6, #1
 8003014:	e7ee      	b.n	8002ff4 <__libc_init_array+0xc>
 8003016:	f855 3b04 	ldr.w	r3, [r5], #4
 800301a:	4798      	blx	r3
 800301c:	3601      	adds	r6, #1
 800301e:	e7f2      	b.n	8003006 <__libc_init_array+0x1e>
 8003020:	08003088 	.word	0x08003088
 8003024:	08003088 	.word	0x08003088
 8003028:	08003088 	.word	0x08003088
 800302c:	0800308c 	.word	0x0800308c

08003030 <_init>:
 8003030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003032:	bf00      	nop
 8003034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003036:	bc08      	pop	{r3}
 8003038:	469e      	mov	lr, r3
 800303a:	4770      	bx	lr

0800303c <_fini>:
 800303c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800303e:	bf00      	nop
 8003040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003042:	bc08      	pop	{r3}
 8003044:	469e      	mov	lr, r3
 8003046:	4770      	bx	lr
